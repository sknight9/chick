
Final_chicken_last.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001998  08004530  08004530  00005530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec8  08005ec8  0000708c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec8  08005ec8  00006ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed0  08005ed0  0000708c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed4  08005ed4  00006ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005ed8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000008c  08005f64  0000708c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08005f64  000076d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008da4  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f58  00000000  00000000  0000fe60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00011db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000073f  00000000  00000000  00012780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe53  00000000  00000000  00012ebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b47a  00000000  00000000  00032d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd515  00000000  00000000  0003e18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb6a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002afc  00000000  00000000  000fb6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000fe1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004518 	.word	0x08004518

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08004518 	.word	0x08004518

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ee_read>:
#endif
  return false;
}
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	4413      	add	r3, r2
 8000282:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000286:	d901      	bls.n	800028c <ee_read+0x1c>
    return false;
 8000288:	2300      	movs	r3, #0
 800028a:	e01b      	b.n	80002c4 <ee_read+0x54>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	e011      	b.n	80002b6 <ee_read+0x46>
  {
    if (data != NULL)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d00b      	beq.n	80002b0 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 800029e:	f503 337c 	add.w	r3, r3, #258048	@ 0x3f000
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	701a      	strb	r2, [r3, #0]
      data++;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3301      	adds	r3, #1
 80002ae:	607b      	str	r3, [r7, #4]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	3301      	adds	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	4413      	add	r3, r2
 80002bc:	697a      	ldr	r2, [r7, #20]
 80002be:	429a      	cmp	r2, r3
 80002c0:	d3e7      	bcc.n	8000292 <ee_read+0x22>
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
#endif
  }
  return true;
 80002c2:	2301      	movs	r3, #1
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	371c      	adds	r7, #28
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 80002d0:	b5b0      	push	{r4, r5, r7, lr}
 80002d2:	b088      	sub	sp, #32
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	60f8      	str	r0, [r7, #12]
 80002d8:	60b9      	str	r1, [r7, #8]
 80002da:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 80002dc:	68fa      	ldr	r2, [r7, #12]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	4413      	add	r3, r2
 80002e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80002e6:	d901      	bls.n	80002ec <ee_write+0x1c>
    return false;
 80002e8:	2300      	movs	r3, #0
 80002ea:	e05a      	b.n	80003a2 <ee_write+0xd2>
  if (data == NULL)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d101      	bne.n	80002f6 <ee_write+0x26>
    return false;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e055      	b.n	80003a2 <ee_write+0xd2>
  HAL_FLASH_Unlock();
 80002f6:	f001 fee9 	bl	80020cc <HAL_FLASH_Unlock>
      return false;
    }
  }	
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 80002fa:	2300      	movs	r3, #0
 80002fc:	61fb      	str	r3, [r7, #28]
 80002fe:	e049      	b.n	8000394 <ee_write+0xc4>
  {
  	uint8_t DoubleWord[8] =
		{
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	69fb      	ldr	r3, [r7, #28]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000308:	753b      	strb	r3, [r7, #20]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],
 800030a:	69fb      	ldr	r3, [r7, #28]
 800030c:	3301      	adds	r3, #1
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	4413      	add	r3, r2
 8000312:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000314:	757b      	strb	r3, [r7, #21]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],
 8000316:	69fb      	ldr	r3, [r7, #28]
 8000318:	3302      	adds	r3, #2
 800031a:	687a      	ldr	r2, [r7, #4]
 800031c:	4413      	add	r3, r2
 800031e:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000320:	75bb      	strb	r3, [r7, #22]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3303      	adds	r3, #3
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	4413      	add	r3, r2
 800032a:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 800032c:	75fb      	strb	r3, [r7, #23]
			data[i + 0], data[i + 1], data[i + 2], data[i + 3], data[i + 4],
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4413      	add	r3, r2
 8000336:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000338:	763b      	strb	r3, [r7, #24]
			data[i + 5], data[i + 6], data[i + 7]
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	3305      	adds	r3, #5
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000344:	767b      	strb	r3, [r7, #25]
			data[i + 5], data[i + 6], data[i + 7]
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3306      	adds	r3, #6
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 8000350:	76bb      	strb	r3, [r7, #26]
			data[i + 5], data[i + 6], data[i + 7]
 8000352:	69fb      	ldr	r3, [r7, #28]
 8000354:	3307      	adds	r3, #7
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	4413      	add	r3, r2
 800035a:	781b      	ldrb	r3, [r3, #0]
  	uint8_t DoubleWord[8] =
 800035c:	76fb      	strb	r3, [r7, #27]
		};
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, *DoubleWord) != HAL_OK)
 800035e:	69fa      	ldr	r2, [r7, #28]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	4413      	add	r3, r2
 8000364:	f103 6100 	add.w	r1, r3, #134217728	@ 0x8000000
 8000368:	f501 317c 	add.w	r1, r1, #258048	@ 0x3f000
 800036c:	7d3b      	ldrb	r3, [r7, #20]
 800036e:	b2db      	uxtb	r3, r3
 8000370:	2200      	movs	r2, #0
 8000372:	461c      	mov	r4, r3
 8000374:	4615      	mov	r5, r2
 8000376:	4622      	mov	r2, r4
 8000378:	462b      	mov	r3, r5
 800037a:	2000      	movs	r0, #0
 800037c:	f001 fe3a 	bl	8001ff4 <HAL_FLASH_Program>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d003      	beq.n	800038e <ee_write+0xbe>
    {
      HAL_FLASH_Lock();
 8000386:	f001 fec3 	bl	8002110 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
      HAL_ICACHE_Enable();
#endif
      return false;
 800038a:	2300      	movs	r3, #0
 800038c:	e009      	b.n	80003a2 <ee_write+0xd2>
  for (uint32_t i = 0; i < len; i += 8)
 800038e:	69fb      	ldr	r3, [r7, #28]
 8000390:	3308      	adds	r3, #8
 8000392:	61fb      	str	r3, [r7, #28]
 8000394:	69fa      	ldr	r2, [r7, #28]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	429a      	cmp	r2, r3
 800039a:	d3b1      	bcc.n	8000300 <ee_write+0x30>
#endif
      return false;
    }
  }
#endif
  HAL_FLASH_Lock();
 800039c:	f001 feb8 	bl	8002110 <HAL_FLASH_Lock>
#if _EE_ICACHE_CTRL == 1
  HAL_ICACHE_Enable();
#endif
  return true;
 80003a0:	2301      	movs	r3, #1
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3720      	adds	r7, #32
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080003ac <setChick>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


void setChick(int level){ //update the character on screen
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af02      	add	r7, sp, #8
 80003b2:	6078      	str	r0, [r7, #4]
	if(level==0)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d10a      	bne.n	80003d0 <setChick+0x24>
		ssd1306_DrawBitmap(68, 15, chick_sad_01, 64, 48, White); //set to sad character
 80003ba:	2301      	movs	r3, #1
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2330      	movs	r3, #48	@ 0x30
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	2340      	movs	r3, #64	@ 0x40
 80003c4:	4a2d      	ldr	r2, [pc, #180]	@ (800047c <setChick+0xd0>)
 80003c6:	210f      	movs	r1, #15
 80003c8:	2044      	movs	r0, #68	@ 0x44
 80003ca:	f001 fbe1 	bl	8001b90 <ssd1306_DrawBitmap>
 80003ce:	e04f      	b.n	8000470 <setChick+0xc4>
	else if(level==1)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d10a      	bne.n	80003ec <setChick+0x40>
		ssd1306_DrawBitmap(68, 15, chick_love_01, 64, 48, White); //set to happy character
 80003d6:	2301      	movs	r3, #1
 80003d8:	9301      	str	r3, [sp, #4]
 80003da:	2330      	movs	r3, #48	@ 0x30
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	2340      	movs	r3, #64	@ 0x40
 80003e0:	4a27      	ldr	r2, [pc, #156]	@ (8000480 <setChick+0xd4>)
 80003e2:	210f      	movs	r1, #15
 80003e4:	2044      	movs	r0, #68	@ 0x44
 80003e6:	f001 fbd3 	bl	8001b90 <ssd1306_DrawBitmap>
 80003ea:	e041      	b.n	8000470 <setChick+0xc4>
	else if(level==2){                                            //draw to main character with current equipment on
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b02      	cmp	r3, #2
 80003f0:	d13e      	bne.n	8000470 <setChick+0xc4>
		if(saved_stats.flower == 1 && saved_stats.hat == 1)
 80003f2:	4b24      	ldr	r3, [pc, #144]	@ (8000484 <setChick+0xd8>)
 80003f4:	789b      	ldrb	r3, [r3, #2]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d10f      	bne.n	800041c <setChick+0x70>
 80003fc:	4b21      	ldr	r3, [pc, #132]	@ (8000484 <setChick+0xd8>)
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b01      	cmp	r3, #1
 8000404:	d10a      	bne.n	800041c <setChick+0x70>
			ssd1306_DrawBitmap(62, 7, hat_flower_chick, 64, 58, White);
 8000406:	2301      	movs	r3, #1
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	233a      	movs	r3, #58	@ 0x3a
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2340      	movs	r3, #64	@ 0x40
 8000410:	4a1d      	ldr	r2, [pc, #116]	@ (8000488 <setChick+0xdc>)
 8000412:	2107      	movs	r1, #7
 8000414:	203e      	movs	r0, #62	@ 0x3e
 8000416:	f001 fbbb 	bl	8001b90 <ssd1306_DrawBitmap>
 800041a:	e029      	b.n	8000470 <setChick+0xc4>
		else if(saved_stats.hat == 1)
 800041c:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <setChick+0xd8>)
 800041e:	78db      	ldrb	r3, [r3, #3]
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10a      	bne.n	800043c <setChick+0x90>
			ssd1306_DrawBitmap(68, 7, hat_chick, 64, 58, White);
 8000426:	2301      	movs	r3, #1
 8000428:	9301      	str	r3, [sp, #4]
 800042a:	233a      	movs	r3, #58	@ 0x3a
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	2340      	movs	r3, #64	@ 0x40
 8000430:	4a16      	ldr	r2, [pc, #88]	@ (800048c <setChick+0xe0>)
 8000432:	2107      	movs	r1, #7
 8000434:	2044      	movs	r0, #68	@ 0x44
 8000436:	f001 fbab 	bl	8001b90 <ssd1306_DrawBitmap>
 800043a:	e019      	b.n	8000470 <setChick+0xc4>
		else if(saved_stats.flower == 1)
 800043c:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <setChick+0xd8>)
 800043e:	789b      	ldrb	r3, [r3, #2]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b01      	cmp	r3, #1
 8000444:	d10a      	bne.n	800045c <setChick+0xb0>
			ssd1306_DrawBitmap(62, 15, flower_chick, 64, 48, White);
 8000446:	2301      	movs	r3, #1
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	2330      	movs	r3, #48	@ 0x30
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2340      	movs	r3, #64	@ 0x40
 8000450:	4a0f      	ldr	r2, [pc, #60]	@ (8000490 <setChick+0xe4>)
 8000452:	210f      	movs	r1, #15
 8000454:	203e      	movs	r0, #62	@ 0x3e
 8000456:	f001 fb9b 	bl	8001b90 <ssd1306_DrawBitmap>
 800045a:	e009      	b.n	8000470 <setChick+0xc4>
		else
			ssd1306_DrawBitmap(68, 15, chick_01, 64,48 , White);
 800045c:	2301      	movs	r3, #1
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	2330      	movs	r3, #48	@ 0x30
 8000462:	9300      	str	r3, [sp, #0]
 8000464:	2340      	movs	r3, #64	@ 0x40
 8000466:	4a0b      	ldr	r2, [pc, #44]	@ (8000494 <setChick+0xe8>)
 8000468:	210f      	movs	r1, #15
 800046a:	2044      	movs	r0, #68	@ 0x44
 800046c:	f001 fb90 	bl	8001b90 <ssd1306_DrawBitmap>
	}

	ssd1306_UpdateScreen();
 8000470:	f001 fbfc 	bl	8001c6c <ssd1306_UpdateScreen>
	return;
 8000474:	bf00      	nop
}
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	08005674 	.word	0x08005674
 8000480:	080054f4 	.word	0x080054f4
 8000484:	200000ac 	.word	0x200000ac
 8000488:	08005b44 	.word	0x08005b44
 800048c:	08005974 	.word	0x08005974
 8000490:	08005d14 	.word	0x08005d14
 8000494:	080057f4 	.word	0x080057f4

08000498 <setMenuCursor>:



void setMenuCursor(int x){
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af02      	add	r7, sp, #8
 800049e:	6078      	str	r0, [r7, #4]
	//clear old cursor, put new one
	ssd1306_FillRectangle(2, menu_Cursor*12, 5, menu_Cursor*12+3, Black);
 80004a0:	4b26      	ldr	r3, [pc, #152]	@ (800053c <setMenuCursor+0xa4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	4413      	add	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	b2d9      	uxtb	r1, r3
 80004ae:	4b23      	ldr	r3, [pc, #140]	@ (800053c <setMenuCursor+0xa4>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	461a      	mov	r2, r3
 80004b4:	0052      	lsls	r2, r2, #1
 80004b6:	4413      	add	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	3303      	adds	r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	2200      	movs	r2, #0
 80004c2:	9200      	str	r2, [sp, #0]
 80004c4:	2205      	movs	r2, #5
 80004c6:	2002      	movs	r0, #2
 80004c8:	f001 fb14 	bl	8001af4 <ssd1306_FillRectangle>
	//1 is move up, 2 is move down;
	if(x==1 && menu_Cursor>1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d10a      	bne.n	80004e8 <setMenuCursor+0x50>
 80004d2:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <setMenuCursor+0xa4>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d906      	bls.n	80004e8 <setMenuCursor+0x50>
	menu_Cursor--;
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <setMenuCursor+0xa4>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b16      	ldr	r3, [pc, #88]	@ (800053c <setMenuCursor+0xa4>)
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e00c      	b.n	8000502 <setMenuCursor+0x6a>
	else if((x == 2) && (menu_Cursor<4)) //check to move up or down and error check
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b02      	cmp	r3, #2
 80004ec:	d109      	bne.n	8000502 <setMenuCursor+0x6a>
 80004ee:	4b13      	ldr	r3, [pc, #76]	@ (800053c <setMenuCursor+0xa4>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b03      	cmp	r3, #3
 80004f4:	d805      	bhi.n	8000502 <setMenuCursor+0x6a>
		menu_Cursor++;  //move cursor down
 80004f6:	4b11      	ldr	r3, [pc, #68]	@ (800053c <setMenuCursor+0xa4>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	3301      	adds	r3, #1
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b0f      	ldr	r3, [pc, #60]	@ (800053c <setMenuCursor+0xa4>)
 8000500:	701a      	strb	r2, [r3, #0]
	ssd1306_FillRectangle(2, menu_Cursor*12, 5, menu_Cursor*12+3, White);
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <setMenuCursor+0xa4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	461a      	mov	r2, r3
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	4413      	add	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	b2d9      	uxtb	r1, r3
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <setMenuCursor+0xa4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	461a      	mov	r2, r3
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	4413      	add	r3, r2
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	b2db      	uxtb	r3, r3
 800051e:	3303      	adds	r3, #3
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2201      	movs	r2, #1
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	2205      	movs	r2, #5
 8000528:	2002      	movs	r0, #2
 800052a:	f001 fae3 	bl	8001af4 <ssd1306_FillRectangle>
	ssd1306_UpdateScreen();
 800052e:	f001 fb9d 	bl	8001c6c <ssd1306_UpdateScreen>

}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	200000a8 	.word	0x200000a8

08000540 <setShopCursor>:

void setShopCursor(int x){
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af02      	add	r7, sp, #8
 8000546:	6078      	str	r0, [r7, #4]
	//clear old cursor, put new one
	ssd1306_FillRectangle(shop_Cursor*35+5, 40,shop_Cursor*35+15,43 , Black);
 8000548:	4b2c      	ldr	r3, [pc, #176]	@ (80005fc <setShopCursor+0xbc>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	461a      	mov	r2, r3
 800054e:	0092      	lsls	r2, r2, #2
 8000550:	4413      	add	r3, r2
 8000552:	461a      	mov	r2, r3
 8000554:	00d2      	lsls	r2, r2, #3
 8000556:	1ad3      	subs	r3, r2, r3
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3305      	adds	r3, #5
 800055c:	b2d8      	uxtb	r0, r3
 800055e:	4b27      	ldr	r3, [pc, #156]	@ (80005fc <setShopCursor+0xbc>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	0092      	lsls	r2, r2, #2
 8000566:	4413      	add	r3, r2
 8000568:	461a      	mov	r2, r3
 800056a:	00d2      	lsls	r2, r2, #3
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	330f      	adds	r3, #15
 8000572:	b2da      	uxtb	r2, r3
 8000574:	2300      	movs	r3, #0
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	232b      	movs	r3, #43	@ 0x2b
 800057a:	2128      	movs	r1, #40	@ 0x28
 800057c:	f001 faba 	bl	8001af4 <ssd1306_FillRectangle>
	//1 is move up, 2 is move down;
	if(x==1 && shop_Cursor>0)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d10a      	bne.n	800059c <setShopCursor+0x5c>
 8000586:	4b1d      	ldr	r3, [pc, #116]	@ (80005fc <setShopCursor+0xbc>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <setShopCursor+0x5c>
		shop_Cursor--;
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <setShopCursor+0xbc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <setShopCursor+0xbc>)
 8000598:	701a      	strb	r2, [r3, #0]
 800059a:	e00c      	b.n	80005b6 <setShopCursor+0x76>
	else if(x==2 && shop_Cursor<4)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d109      	bne.n	80005b6 <setShopCursor+0x76>
 80005a2:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <setShopCursor+0xbc>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d805      	bhi.n	80005b6 <setShopCursor+0x76>
		shop_Cursor++;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <setShopCursor+0xbc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <setShopCursor+0xbc>)
 80005b4:	701a      	strb	r2, [r3, #0]

	ssd1306_FillRectangle(shop_Cursor*35+5, 40,shop_Cursor*35+15,43 , White);
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <setShopCursor+0xbc>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	0092      	lsls	r2, r2, #2
 80005be:	4413      	add	r3, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	00d2      	lsls	r2, r2, #3
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	3305      	adds	r3, #5
 80005ca:	b2d8      	uxtb	r0, r3
 80005cc:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <setShopCursor+0xbc>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	0092      	lsls	r2, r2, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	461a      	mov	r2, r3
 80005d8:	00d2      	lsls	r2, r2, #3
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	330f      	adds	r3, #15
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	2301      	movs	r3, #1
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	232b      	movs	r3, #43	@ 0x2b
 80005e8:	2128      	movs	r1, #40	@ 0x28
 80005ea:	f001 fa83 	bl	8001af4 <ssd1306_FillRectangle>
	ssd1306_UpdateScreen();
 80005ee:	f001 fb3d 	bl	8001c6c <ssd1306_UpdateScreen>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	200000a9 	.word	0x200000a9

08000600 <setMenu>:


void setMenu(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
	char* hun[7];
	uint16_t x,y;	//char* shop={'S','h','o','p','\n'};
	x=10;y=10;
 8000606:	230a      	movs	r3, #10
 8000608:	83fb      	strh	r3, [r7, #30]
 800060a:	230a      	movs	r3, #10
 800060c:	83bb      	strh	r3, [r7, #28]
	ssd1306_SetCursor(x, y);
 800060e:	8bfb      	ldrh	r3, [r7, #30]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	8bba      	ldrh	r2, [r7, #28]
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fa53 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("shop\n", Font_7x10, White);
 800061e:	4a28      	ldr	r2, [pc, #160]	@ (80006c0 <setMenu+0xc0>)
 8000620:	2301      	movs	r3, #1
 8000622:	ca06      	ldmia	r2, {r1, r2}
 8000624:	4827      	ldr	r0, [pc, #156]	@ (80006c4 <setMenu+0xc4>)
 8000626:	f001 fa27 	bl	8001a78 <ssd1306_WriteString>
	y+=12;x=10;
 800062a:	8bbb      	ldrh	r3, [r7, #28]
 800062c:	330c      	adds	r3, #12
 800062e:	83bb      	strh	r3, [r7, #28]
 8000630:	230a      	movs	r3, #10
 8000632:	83fb      	strh	r3, [r7, #30]

	ssd1306_SetCursor(x, y);
 8000634:	8bfb      	ldrh	r3, [r7, #30]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	8bba      	ldrh	r2, [r7, #28]
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fa40 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("game\n", Font_7x10, White);
 8000644:	4a1e      	ldr	r2, [pc, #120]	@ (80006c0 <setMenu+0xc0>)
 8000646:	2301      	movs	r3, #1
 8000648:	ca06      	ldmia	r2, {r1, r2}
 800064a:	481f      	ldr	r0, [pc, #124]	@ (80006c8 <setMenu+0xc8>)
 800064c:	f001 fa14 	bl	8001a78 <ssd1306_WriteString>
	y+=12;x=10;
 8000650:	8bbb      	ldrh	r3, [r7, #28]
 8000652:	330c      	adds	r3, #12
 8000654:	83bb      	strh	r3, [r7, #28]
 8000656:	230a      	movs	r3, #10
 8000658:	83fb      	strh	r3, [r7, #30]

	ssd1306_SetCursor(x, y);
 800065a:	8bfb      	ldrh	r3, [r7, #30]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	8bba      	ldrh	r2, [r7, #28]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	4611      	mov	r1, r2
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fa2d 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("hunger\n", Font_7x10, White);
 800066a:	4a15      	ldr	r2, [pc, #84]	@ (80006c0 <setMenu+0xc0>)
 800066c:	2301      	movs	r3, #1
 800066e:	ca06      	ldmia	r2, {r1, r2}
 8000670:	4816      	ldr	r0, [pc, #88]	@ (80006cc <setMenu+0xcc>)
 8000672:	f001 fa01 	bl	8001a78 <ssd1306_WriteString>
	y+=12;x=10;
 8000676:	8bbb      	ldrh	r3, [r7, #28]
 8000678:	330c      	adds	r3, #12
 800067a:	83bb      	strh	r3, [r7, #28]
 800067c:	230a      	movs	r3, #10
 800067e:	83fb      	strh	r3, [r7, #30]

	ssd1306_SetCursor(x, y);
 8000680:	8bfb      	ldrh	r3, [r7, #30]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	8bba      	ldrh	r2, [r7, #28]
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	4611      	mov	r1, r2
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fa1a 	bl	8001ac4 <ssd1306_SetCursor>
	sprintf(hun, "%d", saved_stats.hunger);
 8000690:	4b0f      	ldr	r3, [pc, #60]	@ (80006d0 <setMenu+0xd0>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	463b      	mov	r3, r7
 800069a:	490e      	ldr	r1, [pc, #56]	@ (80006d4 <setMenu+0xd4>)
 800069c:	4618      	mov	r0, r3
 800069e:	f003 fa9b 	bl	8003bd8 <siprintf>
	hun[3]='%';
 80006a2:	2325      	movs	r3, #37	@ 0x25
 80006a4:	60fb      	str	r3, [r7, #12]
	ssd1306_WriteString(hun, Font_7x10, White);
 80006a6:	4a06      	ldr	r2, [pc, #24]	@ (80006c0 <setMenu+0xc0>)
 80006a8:	4638      	mov	r0, r7
 80006aa:	2301      	movs	r3, #1
 80006ac:	ca06      	ldmia	r2, {r1, r2}
 80006ae:	f001 f9e3 	bl	8001a78 <ssd1306_WriteString>

	setMenuCursor(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff fef0 	bl	8000498 <setMenuCursor>

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000000c 	.word	0x2000000c
 80006c4:	08004530 	.word	0x08004530
 80006c8:	08004538 	.word	0x08004538
 80006cc:	08004540 	.word	0x08004540
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	08004548 	.word	0x08004548

080006d8 <setshop>:
void setshop(){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	@ 0x28
 80006dc:	af02      	add	r7, sp, #8
	shop_Cursor=0;
 80006de:	4b64      	ldr	r3, [pc, #400]	@ (8000870 <setshop+0x198>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	ssd1306_Fill(Black);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f001 f8c7 	bl	8001878 <ssd1306_Fill>
	char* mun[7];
	uint16_t x,y;
	x=10;y=2;
 80006ea:	230a      	movs	r3, #10
 80006ec:	83fb      	strh	r3, [r7, #30]
 80006ee:	2302      	movs	r3, #2
 80006f0:	83bb      	strh	r3, [r7, #28]
	ssd1306_SetCursor(x, y);
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	8bba      	ldrh	r2, [r7, #28]
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 f9e1 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("Money\n", Font_6x8, White);
 8000702:	4a5c      	ldr	r2, [pc, #368]	@ (8000874 <setshop+0x19c>)
 8000704:	2301      	movs	r3, #1
 8000706:	ca06      	ldmia	r2, {r1, r2}
 8000708:	485b      	ldr	r0, [pc, #364]	@ (8000878 <setshop+0x1a0>)
 800070a:	f001 f9b5 	bl	8001a78 <ssd1306_WriteString>
	y+=12;x=10;
 800070e:	8bbb      	ldrh	r3, [r7, #28]
 8000710:	330c      	adds	r3, #12
 8000712:	83bb      	strh	r3, [r7, #28]
 8000714:	230a      	movs	r3, #10
 8000716:	83fb      	strh	r3, [r7, #30]

	sprintf(mun, "%d", saved_stats.money);
 8000718:	4b58      	ldr	r3, [pc, #352]	@ (800087c <setshop+0x1a4>)
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	463b      	mov	r3, r7
 8000722:	4957      	ldr	r1, [pc, #348]	@ (8000880 <setshop+0x1a8>)
 8000724:	4618      	mov	r0, r3
 8000726:	f003 fa57 	bl	8003bd8 <siprintf>
	mun[3]='%';
 800072a:	2325      	movs	r3, #37	@ 0x25
 800072c:	60fb      	str	r3, [r7, #12]
		//hun[4]='\n';
	ssd1306_SetCursor(x, y);
 800072e:	8bfb      	ldrh	r3, [r7, #30]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	8bba      	ldrh	r2, [r7, #28]
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f9c3 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString(mun, Font_6x8, White);
 800073e:	4a4d      	ldr	r2, [pc, #308]	@ (8000874 <setshop+0x19c>)
 8000740:	4638      	mov	r0, r7
 8000742:	2301      	movs	r3, #1
 8000744:	ca06      	ldmia	r2, {r1, r2}
 8000746:	f001 f997 	bl	8001a78 <ssd1306_WriteString>

	ssd1306_DrawBitmap(40,4 , hat_small, 40, 40, White);
 800074a:	2301      	movs	r3, #1
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2328      	movs	r3, #40	@ 0x28
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2328      	movs	r3, #40	@ 0x28
 8000754:	4a4b      	ldr	r2, [pc, #300]	@ (8000884 <setshop+0x1ac>)
 8000756:	2104      	movs	r1, #4
 8000758:	2028      	movs	r0, #40	@ 0x28
 800075a:	f001 fa19 	bl	8001b90 <ssd1306_DrawBitmap>
	ssd1306_SetCursor(40, 30);
 800075e:	211e      	movs	r1, #30
 8000760:	2028      	movs	r0, #40	@ 0x28
 8000762:	f001 f9af 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("Hat\n", Font_6x8, White);
 8000766:	4a43      	ldr	r2, [pc, #268]	@ (8000874 <setshop+0x19c>)
 8000768:	2301      	movs	r3, #1
 800076a:	ca06      	ldmia	r2, {r1, r2}
 800076c:	4846      	ldr	r0, [pc, #280]	@ (8000888 <setshop+0x1b0>)
 800076e:	f001 f983 	bl	8001a78 <ssd1306_WriteString>

	ssd1306_DrawBitmap(75,4 , flower_shop, 40, 40, White);
 8000772:	2301      	movs	r3, #1
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2328      	movs	r3, #40	@ 0x28
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2328      	movs	r3, #40	@ 0x28
 800077c:	4a43      	ldr	r2, [pc, #268]	@ (800088c <setshop+0x1b4>)
 800077e:	2104      	movs	r1, #4
 8000780:	204b      	movs	r0, #75	@ 0x4b
 8000782:	f001 fa05 	bl	8001b90 <ssd1306_DrawBitmap>
	ssd1306_SetCursor(75, 30);
 8000786:	211e      	movs	r1, #30
 8000788:	204b      	movs	r0, #75	@ 0x4b
 800078a:	f001 f99b 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("FLWR\n", Font_6x8, White);
 800078e:	4a39      	ldr	r2, [pc, #228]	@ (8000874 <setshop+0x19c>)
 8000790:	2301      	movs	r3, #1
 8000792:	ca06      	ldmia	r2, {r1, r2}
 8000794:	483e      	ldr	r0, [pc, #248]	@ (8000890 <setshop+0x1b8>)
 8000796:	f001 f96f 	bl	8001a78 <ssd1306_WriteString>

	ssd1306_SetCursor(2, 30);
 800079a:	211e      	movs	r1, #30
 800079c:	2002      	movs	r0, #2
 800079e:	f001 f991 	bl	8001ac4 <ssd1306_SetCursor>
	ssd1306_WriteString("menu\n", Font_6x8, White);
 80007a2:	4a34      	ldr	r2, [pc, #208]	@ (8000874 <setshop+0x19c>)
 80007a4:	2301      	movs	r3, #1
 80007a6:	ca06      	ldmia	r2, {r1, r2}
 80007a8:	483a      	ldr	r0, [pc, #232]	@ (8000894 <setshop+0x1bc>)
 80007aa:	f001 f965 	bl	8001a78 <ssd1306_WriteString>

	ssd1306_SetCursor(70, 55);
 80007ae:	2137      	movs	r1, #55	@ 0x37
 80007b0:	2046      	movs	r0, #70	@ 0x46
 80007b2:	f001 f987 	bl	8001ac4 <ssd1306_SetCursor>

	if(saved_stats.flower==0 ||saved_stats.flower==255)
 80007b6:	4b31      	ldr	r3, [pc, #196]	@ (800087c <setshop+0x1a4>)
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d004      	beq.n	80007ca <setshop+0xf2>
 80007c0:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <setshop+0x1a4>)
 80007c2:	789b      	ldrb	r3, [r3, #2]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2bff      	cmp	r3, #255	@ 0xff
 80007c8:	d106      	bne.n	80007d8 <setshop+0x100>
		ssd1306_WriteString("40$", Font_6x8, White);
 80007ca:	4a2a      	ldr	r2, [pc, #168]	@ (8000874 <setshop+0x19c>)
 80007cc:	2301      	movs	r3, #1
 80007ce:	ca06      	ldmia	r2, {r1, r2}
 80007d0:	4831      	ldr	r0, [pc, #196]	@ (8000898 <setshop+0x1c0>)
 80007d2:	f001 f951 	bl	8001a78 <ssd1306_WriteString>
 80007d6:	e016      	b.n	8000806 <setshop+0x12e>
	else if(saved_stats.flower==1)
 80007d8:	4b28      	ldr	r3, [pc, #160]	@ (800087c <setshop+0x1a4>)
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d106      	bne.n	80007f0 <setshop+0x118>
		ssd1306_WriteString("on", Font_6x8, White);
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <setshop+0x19c>)
 80007e4:	2301      	movs	r3, #1
 80007e6:	ca06      	ldmia	r2, {r1, r2}
 80007e8:	482c      	ldr	r0, [pc, #176]	@ (800089c <setshop+0x1c4>)
 80007ea:	f001 f945 	bl	8001a78 <ssd1306_WriteString>
 80007ee:	e00a      	b.n	8000806 <setshop+0x12e>
	else if(saved_stats.flower==2)
 80007f0:	4b22      	ldr	r3, [pc, #136]	@ (800087c <setshop+0x1a4>)
 80007f2:	789b      	ldrb	r3, [r3, #2]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d105      	bne.n	8000806 <setshop+0x12e>
		ssd1306_WriteString("off", Font_6x8, White);
 80007fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000874 <setshop+0x19c>)
 80007fc:	2301      	movs	r3, #1
 80007fe:	ca06      	ldmia	r2, {r1, r2}
 8000800:	4827      	ldr	r0, [pc, #156]	@ (80008a0 <setshop+0x1c8>)
 8000802:	f001 f939 	bl	8001a78 <ssd1306_WriteString>

	ssd1306_SetCursor(45, 55);
 8000806:	2137      	movs	r1, #55	@ 0x37
 8000808:	202d      	movs	r0, #45	@ 0x2d
 800080a:	f001 f95b 	bl	8001ac4 <ssd1306_SetCursor>
	if(saved_stats.hat==0 ||saved_stats.hat==255)
 800080e:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <setshop+0x1a4>)
 8000810:	78db      	ldrb	r3, [r3, #3]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d004      	beq.n	8000822 <setshop+0x14a>
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <setshop+0x1a4>)
 800081a:	78db      	ldrb	r3, [r3, #3]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d106      	bne.n	8000830 <setshop+0x158>
		ssd1306_WriteString("40$", Font_6x8, White);
 8000822:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <setshop+0x19c>)
 8000824:	2301      	movs	r3, #1
 8000826:	ca06      	ldmia	r2, {r1, r2}
 8000828:	481b      	ldr	r0, [pc, #108]	@ (8000898 <setshop+0x1c0>)
 800082a:	f001 f925 	bl	8001a78 <ssd1306_WriteString>
 800082e:	e016      	b.n	800085e <setshop+0x186>
	else if(saved_stats.hat==1)
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <setshop+0x1a4>)
 8000832:	78db      	ldrb	r3, [r3, #3]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b01      	cmp	r3, #1
 8000838:	d106      	bne.n	8000848 <setshop+0x170>
		ssd1306_WriteString("on", Font_6x8, White);
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <setshop+0x19c>)
 800083c:	2301      	movs	r3, #1
 800083e:	ca06      	ldmia	r2, {r1, r2}
 8000840:	4816      	ldr	r0, [pc, #88]	@ (800089c <setshop+0x1c4>)
 8000842:	f001 f919 	bl	8001a78 <ssd1306_WriteString>
 8000846:	e00a      	b.n	800085e <setshop+0x186>
	else if(saved_stats.hat==2)
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <setshop+0x1a4>)
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b02      	cmp	r3, #2
 8000850:	d105      	bne.n	800085e <setshop+0x186>
			ssd1306_WriteString("off", Font_6x8, White);
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <setshop+0x19c>)
 8000854:	2301      	movs	r3, #1
 8000856:	ca06      	ldmia	r2, {r1, r2}
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <setshop+0x1c8>)
 800085a:	f001 f90d 	bl	8001a78 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800085e:	f001 fa05 	bl	8001c6c <ssd1306_UpdateScreen>
	setShopCursor(0);
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff fe6c 	bl	8000540 <setShopCursor>
return;
 8000868:	bf00      	nop
}
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000a9 	.word	0x200000a9
 8000874:	20000004 	.word	0x20000004
 8000878:	0800454c 	.word	0x0800454c
 800087c:	200000ac 	.word	0x200000ac
 8000880:	08004548 	.word	0x08004548
 8000884:	08005364 	.word	0x08005364
 8000888:	08004554 	.word	0x08004554
 800088c:	0800542c 	.word	0x0800542c
 8000890:	0800455c 	.word	0x0800455c
 8000894:	08004564 	.word	0x08004564
 8000898:	0800456c 	.word	0x0800456c
 800089c:	08004570 	.word	0x08004570
 80008a0:	08004574 	.word	0x08004574

080008a4 <save_stats>:



void save_stats(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
	//return;

	  FLASH_EraseInitTypeDef s_eraseinit;
	  uint32_t page_error;

	  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
	  s_eraseinit.NbPages     = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
	  s_eraseinit.Page        = 126;
 80008b2:	237e      	movs	r3, #126	@ 0x7e
 80008b4:	613b      	str	r3, [r7, #16]
	  s_eraseinit.Banks       = 1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	60fb      	str	r3, [r7, #12]




	     HAL_FLASH_Unlock();
 80008ba:	f001 fc07 	bl	80020cc <HAL_FLASH_Unlock>
	     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <save_stats+0x44>)
 80008c0:	22b3      	movs	r2, #179	@ 0xb3
 80008c2:	611a      	str	r2, [r3, #16]
	     HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80008c4:	1d3a      	adds	r2, r7, #4
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fce1 	bl	8002294 <HAL_FLASHEx_Erase>

	     //HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,0x803f0000, &saved_stats);

	     ee_write(0, sizeof(saved_stats), &saved_stats);
 80008d2:	4a06      	ldr	r2, [pc, #24]	@ (80008ec <save_stats+0x48>)
 80008d4:	2104      	movs	r1, #4
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fcfa 	bl	80002d0 <ee_write>
	      HAL_FLASH_Lock();
 80008dc:	f001 fc18 	bl	8002110 <HAL_FLASH_Lock>

}
 80008e0:	bf00      	nop
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40022000 	.word	0x40022000
 80008ec:	200000ac 	.word	0x200000ac

080008f0 <check_joystick>:





void check_joystick(){
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
	//  HAL_ADC_Start(&hadc2);
	//  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
	//  joystick.y=HAL_ADC_GetValue(&hadc1);
	//  HAL_ADC_PollForConversion(&hadc2,HAL_MAX_DELAY);
	//  joystick.x=HAL_ADC_GetValue(&hadc2);
	return;
 80008f4:	bf00      	nop
}
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 8000906:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f001 f9f6 	bl	8001cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 fc54 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 fd20 	bl	8001354 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000914:	f000 fca2 	bl	800125c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000918:	f000 fcde 	bl	80012d8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
    ssd1306_Init();
 800091c:	f000 ff42 	bl	80017a4 <ssd1306_Init>
    ssd1306_Fill(White);
 8000920:	2001      	movs	r0, #1
 8000922:	f000 ffa9 	bl	8001878 <ssd1306_Fill>
	//uint8_t data[2];
//	data[0]=0xFA;
	//data[1]=0xAF;

	//HAL_SPI_Transmit(&hspi3, data, 2, HAL_MAX_DELAY);
	ssd1306_UpdateScreen();
 8000926:	f001 f9a1 	bl	8001c6c <ssd1306_UpdateScreen>
	HAL_Delay(500);
 800092a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800092e:	f001 fa57 	bl	8001de0 <HAL_Delay>



	ee_read(0,sizeof(saved_stats),&saved_stats);
 8000932:	4aba      	ldr	r2, [pc, #744]	@ (8000c1c <main+0x31c>)
 8000934:	2104      	movs	r1, #4
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fc9a 	bl	8000270 <ee_read>

	saved_stats.hat=0;
 800093c:	4bb7      	ldr	r3, [pc, #732]	@ (8000c1c <main+0x31c>)
 800093e:	2200      	movs	r2, #0
 8000940:	70da      	strb	r2, [r3, #3]
	saved_stats.flower=0;
 8000942:	4bb6      	ldr	r3, [pc, #728]	@ (8000c1c <main+0x31c>)
 8000944:	2200      	movs	r2, #0
 8000946:	709a      	strb	r2, [r3, #2]
	saved_stats.hunger++;
 8000948:	4bb4      	ldr	r3, [pc, #720]	@ (8000c1c <main+0x31c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b2db      	uxtb	r3, r3
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4bb2      	ldr	r3, [pc, #712]	@ (8000c1c <main+0x31c>)
 8000954:	701a      	strb	r2, [r3, #0]
	saved_stats.money=0;
 8000956:	4bb1      	ldr	r3, [pc, #708]	@ (8000c1c <main+0x31c>)
 8000958:	2200      	movs	r2, #0
 800095a:	705a      	strb	r2, [r3, #1]
	//if(saved_stats.money==255)
	//saved_stats.money=0;

	//if(saved_stats.hunger==255)
	//saved_stats.hunger=1;
	HAL_Delay(400);
 800095c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000960:	f001 fa3e 	bl	8001de0 <HAL_Delay>
	save_stats();
 8000964:	f7ff ff9e 	bl	80008a4 <save_stats>
	ee_read(0,sizeof(saved_stats),&saved_stats);
 8000968:	4aac      	ldr	r2, [pc, #688]	@ (8000c1c <main+0x31c>)
 800096a:	2104      	movs	r1, #4
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fc7f 	bl	8000270 <ee_read>


	uint8_t game_mode=0;
 8000972:	2300      	movs	r3, #0
 8000974:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	uint8_t chick=0;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  switch(game_mode){
 800097e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8000982:	2b02      	cmp	r3, #2
 8000984:	f000 8158 	beq.w	8000c38 <main+0x338>
 8000988:	2b02      	cmp	r3, #2
 800098a:	f300 8411 	bgt.w	80011b0 <main+0x8b0>
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <main+0x9a>
 8000992:	2b01      	cmp	r3, #1
 8000994:	d032      	beq.n	80009fc <main+0xfc>
 8000996:	f000 bc0b 	b.w	80011b0 <main+0x8b0>

	  	  case 0: ssd1306_Fill(Black);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 ff6c 	bl	8001878 <ssd1306_Fill>
	  		  	  setChick(chick);
 80009a0:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fd01 	bl	80003ac <setChick>
	  	  	  	  setMenu();
 80009aa:	f7ff fe29 	bl	8000600 <setMenu>
	  	  	  	  if(chick!=2){
 80009ae:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d013      	beq.n	80009de <main+0xde>
	  	  	  		  HAL_Delay(1700);
 80009b6:	f240 60a4 	movw	r0, #1700	@ 0x6a4
 80009ba:	f001 fa11 	bl	8001de0 <HAL_Delay>
	  	  	  		  chick=2;
 80009be:	2302      	movs	r3, #2
 80009c0:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	  	  	  		ssd1306_FillRectangle(62,7,128,64, Black);
 80009c4:	2300      	movs	r3, #0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	2280      	movs	r2, #128	@ 0x80
 80009cc:	2107      	movs	r1, #7
 80009ce:	203e      	movs	r0, #62	@ 0x3e
 80009d0:	f001 f890 	bl	8001af4 <ssd1306_FillRectangle>
	  	  	  		  setChick(chick);
 80009d4:	f897 324e 	ldrb.w	r3, [r7, #590]	@ 0x24e
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fce7 	bl	80003ac <setChick>
	  	  	  	  }

	  	  	  	HAL_Delay(100);
 80009de:	2064      	movs	r0, #100	@ 0x64
 80009e0:	f001 f9fe 	bl	8001de0 <HAL_Delay>
	  		  while(1){

	  			HAL_Delay(2000);
 80009e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009e8:	f001 f9fa 	bl	8001de0 <HAL_Delay>
	  			ssd1306_UpdateScreen();
 80009ec:	f001 f93e 	bl	8001c6c <ssd1306_UpdateScreen>
	  	  			  break;
	  	  			HAL_Delay(100);
	  	  		  }

	  	  		  */
	  			HAL_Delay(500);
 80009f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f4:	f001 f9f4 	bl	8001de0 <HAL_Delay>
	  			HAL_Delay(2000);
 80009f8:	bf00      	nop
 80009fa:	e7f3      	b.n	80009e4 <main+0xe4>
	  		  }

	  	  break;
	  	  case 1:
	  		//  setShop();
	  		  setshop();
 80009fc:	f7ff fe6c 	bl	80006d8 <setshop>
	  		  HAL_Delay(200);
 8000a00:	20c8      	movs	r0, #200	@ 0xc8
 8000a02:	f001 f9ed 	bl	8001de0 <HAL_Delay>
	  		  while(1){

	  	  	  	  check_joystick();
 8000a06:	f7ff ff73 	bl	80008f0 <check_joystick>
	  	  		  if(joystick.x<800){
 8000a0a:	4b85      	ldr	r3, [pc, #532]	@ (8000c20 <main+0x320>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000a12:	d207      	bcs.n	8000a24 <main+0x124>

	  	  			  setShopCursor(1);
 8000a14:	2001      	movs	r0, #1
 8000a16:	f7ff fd93 	bl	8000540 <setShopCursor>
	  	  			HAL_Delay(500);
 8000a1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a1e:	f001 f9df 	bl	8001de0 <HAL_Delay>
 8000a22:	e00c      	b.n	8000a3e <main+0x13e>
	  	  		  }
	  	  		  else if(joystick.x>3500){
 8000a24:	4b7e      	ldr	r3, [pc, #504]	@ (8000c20 <main+0x320>)
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d906      	bls.n	8000a3e <main+0x13e>

	  	  		setShopCursor(2);
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fd85 	bl	8000540 <setShopCursor>
	  	  		HAL_Delay(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a3a:	f001 f9d1 	bl	8001de0 <HAL_Delay>
	  	  		}
	  	  		  if(GPIO_PIN_RESET==HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000a3e:	2180      	movs	r1, #128	@ 0x80
 8000a40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a44:	f001 feb6 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1db      	bne.n	8000a06 <main+0x106>
	  	  			  while(GPIO_PIN_RESET==HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000a4e:	e002      	b.n	8000a56 <main+0x156>
	  	  				  HAL_Delay(10);
 8000a50:	200a      	movs	r0, #10
 8000a52:	f001 f9c5 	bl	8001de0 <HAL_Delay>
	  	  			  while(GPIO_PIN_RESET==HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000a56:	2180      	movs	r1, #128	@ 0x80
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a5c:	f001 feaa 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d0f4      	beq.n	8000a50 <main+0x150>
	  	  			  }
	  	  			HAL_Delay(30);
 8000a66:	201e      	movs	r0, #30
 8000a68:	f001 f9ba 	bl	8001de0 <HAL_Delay>
	  	  			  if(shop_Cursor==0){
 8000a6c:	4b6d      	ldr	r3, [pc, #436]	@ (8000c24 <main+0x324>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d106      	bne.n	8000a82 <main+0x182>
	  	  				game_mode=0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	  	  				HAL_Delay(10);
 8000a7a:	200a      	movs	r0, #10
 8000a7c:	f001 f9b0 	bl	8001de0 <HAL_Delay>
	  	  				break;
 8000a80:	e0da      	b.n	8000c38 <main+0x338>
	  	  			  }

	  	  			  else if(shop_Cursor==1){
 8000a82:	4b68      	ldr	r3, [pc, #416]	@ (8000c24 <main+0x324>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d160      	bne.n	8000b4c <main+0x24c>

	  	  				  if(saved_stats.hat==1){
 8000a8a:	4b64      	ldr	r3, [pc, #400]	@ (8000c1c <main+0x31c>)
 8000a8c:	78db      	ldrb	r3, [r3, #3]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10f      	bne.n	8000ab4 <main+0x1b4>
	  	  					  saved_stats.hat=2; //hat owned, off
 8000a94:	4b61      	ldr	r3, [pc, #388]	@ (8000c1c <main+0x31c>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	70da      	strb	r2, [r3, #3]
	  			  				ssd1306_SetCursor(45, 55);
 8000a9a:	2137      	movs	r1, #55	@ 0x37
 8000a9c:	202d      	movs	r0, #45	@ 0x2d
 8000a9e:	f001 f811 	bl	8001ac4 <ssd1306_SetCursor>
	  			  				ssd1306_WriteString("off", Font_6x8, White);
 8000aa2:	4a61      	ldr	r2, [pc, #388]	@ (8000c28 <main+0x328>)
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	ca06      	ldmia	r2, {r1, r2}
 8000aa8:	4860      	ldr	r0, [pc, #384]	@ (8000c2c <main+0x32c>)
 8000aaa:	f000 ffe5 	bl	8001a78 <ssd1306_WriteString>
	  			  				ssd1306_UpdateScreen();
 8000aae:	f001 f8dd 	bl	8001c6c <ssd1306_UpdateScreen>
 8000ab2:	e7a8      	b.n	8000a06 <main+0x106>

	  	  				  }
	  	  				else if(saved_stats.hat==2){
 8000ab4:	4b59      	ldr	r3, [pc, #356]	@ (8000c1c <main+0x31c>)
 8000ab6:	78db      	ldrb	r3, [r3, #3]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d10f      	bne.n	8000ade <main+0x1de>
	  	  					saved_stats.hat=1; //hat owned, off
 8000abe:	4b57      	ldr	r3, [pc, #348]	@ (8000c1c <main+0x31c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	70da      	strb	r2, [r3, #3]
	  		  				ssd1306_SetCursor(45, 55);
 8000ac4:	2137      	movs	r1, #55	@ 0x37
 8000ac6:	202d      	movs	r0, #45	@ 0x2d
 8000ac8:	f000 fffc 	bl	8001ac4 <ssd1306_SetCursor>
	  		  				ssd1306_WriteString("on ", Font_6x8, White);
 8000acc:	4a56      	ldr	r2, [pc, #344]	@ (8000c28 <main+0x328>)
 8000ace:	2301      	movs	r3, #1
 8000ad0:	ca06      	ldmia	r2, {r1, r2}
 8000ad2:	4857      	ldr	r0, [pc, #348]	@ (8000c30 <main+0x330>)
 8000ad4:	f000 ffd0 	bl	8001a78 <ssd1306_WriteString>
	  		  				ssd1306_UpdateScreen();
 8000ad8:	f001 f8c8 	bl	8001c6c <ssd1306_UpdateScreen>
 8000adc:	e793      	b.n	8000a06 <main+0x106>
	  	  				}
	  	  			  else if(saved_stats.money>39){
 8000ade:	4b4f      	ldr	r3, [pc, #316]	@ (8000c1c <main+0x31c>)
 8000ae0:	785b      	ldrb	r3, [r3, #1]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b27      	cmp	r3, #39	@ 0x27
 8000ae6:	d98e      	bls.n	8000a06 <main+0x106>
	  	  			  				  saved_stats.hat=1;//hat owned, and on
 8000ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c1c <main+0x31c>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	70da      	strb	r2, [r3, #3]
	  	  			  				  saved_stats.money=saved_stats.money-40;
 8000aee:	4b4b      	ldr	r3, [pc, #300]	@ (8000c1c <main+0x31c>)
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	3b28      	subs	r3, #40	@ 0x28
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b48      	ldr	r3, [pc, #288]	@ (8000c1c <main+0x31c>)
 8000afa:	705a      	strb	r2, [r3, #1]
	  	  			  				  chick=1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	  	  			  				ssd1306_SetCursor(45, 55);
 8000b02:	2137      	movs	r1, #55	@ 0x37
 8000b04:	202d      	movs	r0, #45	@ 0x2d
 8000b06:	f000 ffdd 	bl	8001ac4 <ssd1306_SetCursor>
	  	  			  				ssd1306_WriteString("on ", Font_6x8, White);
 8000b0a:	4a47      	ldr	r2, [pc, #284]	@ (8000c28 <main+0x328>)
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	ca06      	ldmia	r2, {r1, r2}
 8000b10:	4847      	ldr	r0, [pc, #284]	@ (8000c30 <main+0x330>)
 8000b12:	f000 ffb1 	bl	8001a78 <ssd1306_WriteString>


	  	  			  			char* mun[7];
	  	  			  			ssd1306_SetCursor(10, 14);
 8000b16:	210e      	movs	r1, #14
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f000 ffd3 	bl	8001ac4 <ssd1306_SetCursor>
	  	  			  			sprintf(mun, "%d", saved_stats.money);
 8000b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c1c <main+0x31c>)
 8000b20:	785b      	ldrb	r3, [r3, #1]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	f507 7309 	add.w	r3, r7, #548	@ 0x224
 8000b2a:	4942      	ldr	r1, [pc, #264]	@ (8000c34 <main+0x334>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 f853 	bl	8003bd8 <siprintf>
	  	  			  			mun[3]='%';
 8000b32:	2325      	movs	r3, #37	@ 0x25
 8000b34:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
	  	  			  			ssd1306_WriteString(mun, Font_6x8, White);
 8000b38:	4a3b      	ldr	r2, [pc, #236]	@ (8000c28 <main+0x328>)
 8000b3a:	f507 7009 	add.w	r0, r7, #548	@ 0x224
 8000b3e:	2301      	movs	r3, #1
 8000b40:	ca06      	ldmia	r2, {r1, r2}
 8000b42:	f000 ff99 	bl	8001a78 <ssd1306_WriteString>




	  	  			  				ssd1306_UpdateScreen();
 8000b46:	f001 f891 	bl	8001c6c <ssd1306_UpdateScreen>
 8000b4a:	e75c      	b.n	8000a06 <main+0x106>
	  	  			  				//save_stats();
	  	  		  				  }

	  	  			  }
	  	  			  else if(shop_Cursor==2){
 8000b4c:	4b35      	ldr	r3, [pc, #212]	@ (8000c24 <main+0x324>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	f47f af58 	bne.w	8000a06 <main+0x106>

	  	  				  if(saved_stats.flower==1){
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <main+0x31c>)
 8000b58:	789b      	ldrb	r3, [r3, #2]
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10f      	bne.n	8000b80 <main+0x280>
	  	  					  saved_stats.flower=2; //hat owned, off
 8000b60:	4b2e      	ldr	r3, [pc, #184]	@ (8000c1c <main+0x31c>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	709a      	strb	r2, [r3, #2]
	  			  				ssd1306_SetCursor(70, 55);
 8000b66:	2137      	movs	r1, #55	@ 0x37
 8000b68:	2046      	movs	r0, #70	@ 0x46
 8000b6a:	f000 ffab 	bl	8001ac4 <ssd1306_SetCursor>
	  			  				ssd1306_WriteString("off", Font_6x8, White);
 8000b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c28 <main+0x328>)
 8000b70:	2301      	movs	r3, #1
 8000b72:	ca06      	ldmia	r2, {r1, r2}
 8000b74:	482d      	ldr	r0, [pc, #180]	@ (8000c2c <main+0x32c>)
 8000b76:	f000 ff7f 	bl	8001a78 <ssd1306_WriteString>
	  			  				ssd1306_UpdateScreen();
 8000b7a:	f001 f877 	bl	8001c6c <ssd1306_UpdateScreen>
 8000b7e:	e742      	b.n	8000a06 <main+0x106>

	  	  				  }
	  	  				else if(saved_stats.flower==2){
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <main+0x31c>)
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d10f      	bne.n	8000baa <main+0x2aa>
	  	  					saved_stats.flower=1; //hat owned, off
 8000b8a:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <main+0x31c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	709a      	strb	r2, [r3, #2]
	  		  				ssd1306_SetCursor(70, 55);
 8000b90:	2137      	movs	r1, #55	@ 0x37
 8000b92:	2046      	movs	r0, #70	@ 0x46
 8000b94:	f000 ff96 	bl	8001ac4 <ssd1306_SetCursor>
	  		  				ssd1306_WriteString("on ", Font_6x8, White);
 8000b98:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <main+0x328>)
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	ca06      	ldmia	r2, {r1, r2}
 8000b9e:	4824      	ldr	r0, [pc, #144]	@ (8000c30 <main+0x330>)
 8000ba0:	f000 ff6a 	bl	8001a78 <ssd1306_WriteString>
	  		  				ssd1306_UpdateScreen();
 8000ba4:	f001 f862 	bl	8001c6c <ssd1306_UpdateScreen>
 8000ba8:	e72d      	b.n	8000a06 <main+0x106>
	  	  				}
	  	  				else if(saved_stats.money>49){
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <main+0x31c>)
 8000bac:	785b      	ldrb	r3, [r3, #1]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b31      	cmp	r3, #49	@ 0x31
 8000bb2:	f67f af28 	bls.w	8000a06 <main+0x106>
	  		  				  saved_stats.flower=1;//hat owned, and on
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <main+0x31c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	709a      	strb	r2, [r3, #2]
	  		  				  saved_stats.money=saved_stats.money-50;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <main+0x31c>)
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	3b32      	subs	r3, #50	@ 0x32
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <main+0x31c>)
 8000bc8:	705a      	strb	r2, [r3, #1]
	  		  				ssd1306_SetCursor(70, 55);
 8000bca:	2137      	movs	r1, #55	@ 0x37
 8000bcc:	2046      	movs	r0, #70	@ 0x46
 8000bce:	f000 ff79 	bl	8001ac4 <ssd1306_SetCursor>
	  		  				ssd1306_WriteString("on ", Font_6x8, White);
 8000bd2:	4a15      	ldr	r2, [pc, #84]	@ (8000c28 <main+0x328>)
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	ca06      	ldmia	r2, {r1, r2}
 8000bd8:	4815      	ldr	r0, [pc, #84]	@ (8000c30 <main+0x330>)
 8000bda:	f000 ff4d 	bl	8001a78 <ssd1306_WriteString>
	  		  				chick=1;//show the love chick for a sec after leaving shop
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	    			  			char* mun[7];
	    			  			ssd1306_SetCursor(10, 14);
 8000be4:	210e      	movs	r1, #14
 8000be6:	200a      	movs	r0, #10
 8000be8:	f000 ff6c 	bl	8001ac4 <ssd1306_SetCursor>
	    			  			sprintf(mun, "%d", saved_stats.money);
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <main+0x31c>)
 8000bee:	785b      	ldrb	r3, [r3, #1]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000bf8:	490e      	ldr	r1, [pc, #56]	@ (8000c34 <main+0x334>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f002 ffec 	bl	8003bd8 <siprintf>
	    			  			mun[3]='%';
 8000c00:	2325      	movs	r3, #37	@ 0x25
 8000c02:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	    			  			ssd1306_WriteString(mun, Font_6x8, White);
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <main+0x328>)
 8000c08:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	ca06      	ldmia	r2, {r1, r2}
 8000c10:	f000 ff32 	bl	8001a78 <ssd1306_WriteString>


	  		  				ssd1306_UpdateScreen();
 8000c14:	f001 f82a 	bl	8001c6c <ssd1306_UpdateScreen>
	  	  	  	  check_joystick();
 8000c18:	e6f5      	b.n	8000a06 <main+0x106>
 8000c1a:	bf00      	nop
 8000c1c:	200000ac 	.word	0x200000ac
 8000c20:	200000b0 	.word	0x200000b0
 8000c24:	200000a9 	.word	0x200000a9
 8000c28:	20000004 	.word	0x20000004
 8000c2c:	08004574 	.word	0x08004574
 8000c30:	08004578 	.word	0x08004578
 8000c34:	08004548 	.word	0x08004548


	  	//  break;

	  	  case 2:
	  		  ssd1306_Fill(Black);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 fe1d 	bl	8001878 <ssd1306_Fill>
	  		  uint8_t snakex[255];
	  		  uint8_t snakey[255];
	  		  uint8_t foodx=12*5;
 8000c3e:	233c      	movs	r3, #60	@ 0x3c
 8000c40:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
	  		  uint8_t foody=8*5;
 8000c44:	2328      	movs	r3, #40	@ 0x28
 8000c46:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
	  		  uint8_t head=1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
	  		  uint8_t randomishx=12;
 8000c50:	230c      	movs	r3, #12
 8000c52:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
	  		  uint8_t randomishy=8;
 8000c56:	2308      	movs	r3, #8
 8000c58:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
	  		  ssd1306_FillRectangle(foodx,foody,foodx+5,foody+4, White);//food first box
 8000c5c:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 8000c60:	3305      	adds	r3, #5
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8000c68:	3304      	adds	r3, #4
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f897 124c 	ldrb.w	r1, [r7, #588]	@ 0x24c
 8000c70:	f897 024d 	ldrb.w	r0, [r7, #589]	@ 0x24d
 8000c74:	2401      	movs	r4, #1
 8000c76:	9400      	str	r4, [sp, #0]
 8000c78:	f000 ff3c 	bl	8001af4 <ssd1306_FillRectangle>
	  		  uint8_t i=0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 324a 	strb.w	r3, [r7, #586]	@ 0x24a
	  		  uint8_t tail=0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3249 	strb.w	r3, [r7, #585]	@ 0x249
	  		  uint8_t snake_bad=0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3248 	strb.w	r3, [r7, #584]	@ 0x248
	  		  uint8_t snakelen=0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
	  		  snakex[0]=0;snakey[0]=0;
 8000c94:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000c98:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000ca4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
	  		  snakex[1]=0;snakey[1]=0;
 8000cac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000cb0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	705a      	strb	r2, [r3, #1]
 8000cb8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000cbc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	705a      	strb	r2, [r3, #1]
	  		  uint8_t direction=0;//0=right, 1=left, 2 = down, 3=up
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
	  		  ssd1306_UpdateScreen();
 8000cca:	f000 ffcf 	bl	8001c6c <ssd1306_UpdateScreen>
	  		  while(1){

	  				 ssd1306_FillRectangle(snakex[tail],snakey[tail],snakex[tail]+5,snakey[tail]+5, Black);
 8000cce:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000cd2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000cd6:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000cda:	5cd0      	ldrb	r0, [r2, r3]
 8000cdc:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000ce0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000ce4:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000ce8:	5cd1      	ldrb	r1, [r2, r3]
 8000cea:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000cee:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000cf2:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000cf6:	5cd3      	ldrb	r3, [r2, r3]
 8000cf8:	3305      	adds	r3, #5
 8000cfa:	b2dc      	uxtb	r4, r3
 8000cfc:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000d00:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000d04:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000d08:	5cd3      	ldrb	r3, [r2, r3]
 8000d0a:	3305      	adds	r3, #5
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	9200      	str	r2, [sp, #0]
 8000d12:	4622      	mov	r2, r4
 8000d14:	f000 feee 	bl	8001af4 <ssd1306_FillRectangle>
	  				 ssd1306_FillRectangle(snakex[head],snakey[head],snakex[head]+5,snakey[head]+5, White);
 8000d18:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000d1c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000d20:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000d24:	5cd0      	ldrb	r0, [r2, r3]
 8000d26:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000d2a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000d2e:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000d32:	5cd1      	ldrb	r1, [r2, r3]
 8000d34:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000d38:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000d3c:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000d40:	5cd3      	ldrb	r3, [r2, r3]
 8000d42:	3305      	adds	r3, #5
 8000d44:	b2dc      	uxtb	r4, r3
 8000d46:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000d4a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000d4e:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	3305      	adds	r3, #5
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	2201      	movs	r2, #1
 8000d5a:	9200      	str	r2, [sp, #0]
 8000d5c:	4622      	mov	r2, r4
 8000d5e:	f000 fec9 	bl	8001af4 <ssd1306_FillRectangle>
	  				 ssd1306_UpdateScreen();
 8000d62:	f000 ff83 	bl	8001c6c <ssd1306_UpdateScreen>

	  				 i=tail;
 8000d66:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000d6a:	f887 324a 	strb.w	r3, [r7, #586]	@ 0x24a
	  				 if(head!=tail+1)
 8000d6e:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 8000d72:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000d76:	3301      	adds	r3, #1
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d037      	beq.n	8000dec <main+0x4ec>
	  				 while(i!=head){
 8000d7c:	e02e      	b.n	8000ddc <main+0x4dc>
	  					 if(i==head)
 8000d7e:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8000d82:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d02f      	beq.n	8000dea <main+0x4ea>
	  						 break;
	  					if(snakex[head]==snakex[i] && snakey[head]==snakey[i] ){
 8000d8a:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000d8e:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000d92:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000d96:	5cd2      	ldrb	r2, [r2, r3]
 8000d98:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8000d9c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000da0:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000da4:	5ccb      	ldrb	r3, [r1, r3]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d113      	bne.n	8000dd2 <main+0x4d2>
 8000daa:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000dae:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000db2:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000db6:	5cd2      	ldrb	r2, [r2, r3]
 8000db8:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8000dbc:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000dc0:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8000dc4:	5ccb      	ldrb	r3, [r1, r3]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d103      	bne.n	8000dd2 <main+0x4d2>
	  						snake_bad=1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	f887 3248 	strb.w	r3, [r7, #584]	@ 0x248
	  						break;
 8000dd0:	e00c      	b.n	8000dec <main+0x4ec>
	  					}
	  					i++;
 8000dd2:	f897 324a 	ldrb.w	r3, [r7, #586]	@ 0x24a
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	f887 324a 	strb.w	r3, [r7, #586]	@ 0x24a
	  				 while(i!=head){
 8000ddc:	f897 224a 	ldrb.w	r2, [r7, #586]	@ 0x24a
 8000de0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d1ca      	bne.n	8000d7e <main+0x47e>
 8000de8:	e000      	b.n	8000dec <main+0x4ec>
	  						 break;
 8000dea:	bf00      	nop
	  				 }
	  				 if (snakex[head]>125 || snakey[head]>60 ||snake_bad){//out of bounds-gameover
 8000dec:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000df0:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000df4:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	2b7d      	cmp	r3, #125	@ 0x7d
 8000dfc:	d80d      	bhi.n	8000e1a <main+0x51a>
 8000dfe:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000e02:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000e06:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e0e:	d804      	bhi.n	8000e1a <main+0x51a>
 8000e10:	f897 3248 	ldrb.w	r3, [r7, #584]	@ 0x248
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 8083 	beq.w	8000f20 <main+0x620>
	  					 ssd1306_Fill(Black);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fd2c 	bl	8001878 <ssd1306_Fill>
	  					 ssd1306_SetCursor(2, 5);
 8000e20:	2105      	movs	r1, #5
 8000e22:	2002      	movs	r0, #2
 8000e24:	f000 fe4e 	bl	8001ac4 <ssd1306_SetCursor>
	  					 uint8_t scorei=head-tail-4;
 8000e28:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 8000e2c:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	3b04      	subs	r3, #4
 8000e36:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
	  					 if(scorei<4){
 8000e3a:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d809      	bhi.n	8000e56 <main+0x556>
	  					 ssd1306_WriteString("you can do better\n", Font_7x10, White);
 8000e42:	4aca      	ldr	r2, [pc, #808]	@ (800116c <main+0x86c>)
 8000e44:	2301      	movs	r3, #1
 8000e46:	ca06      	ldmia	r2, {r1, r2}
 8000e48:	48c9      	ldr	r0, [pc, #804]	@ (8001170 <main+0x870>)
 8000e4a:	f000 fe15 	bl	8001a78 <ssd1306_WriteString>
	  					 chick=0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 8000e54:	e021      	b.n	8000e9a <main+0x59a>
	  					 }
	  					 else if(scorei<8)
 8000e56:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8000e5a:	2b07      	cmp	r3, #7
 8000e5c:	d806      	bhi.n	8000e6c <main+0x56c>
	  					 ssd1306_WriteString("okok good stuff!\n", Font_7x10, White);
 8000e5e:	4ac3      	ldr	r2, [pc, #780]	@ (800116c <main+0x86c>)
 8000e60:	2301      	movs	r3, #1
 8000e62:	ca06      	ldmia	r2, {r1, r2}
 8000e64:	48c3      	ldr	r0, [pc, #780]	@ (8001174 <main+0x874>)
 8000e66:	f000 fe07 	bl	8001a78 <ssd1306_WriteString>
 8000e6a:	e016      	b.n	8000e9a <main+0x59a>
	  					 else if(scorei<12){
 8000e6c:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8000e70:	2b0b      	cmp	r3, #11
 8000e72:	d809      	bhi.n	8000e88 <main+0x588>
	  					 ssd1306_WriteString("nice score!\n", Font_7x10, White);
 8000e74:	4abd      	ldr	r2, [pc, #756]	@ (800116c <main+0x86c>)
 8000e76:	2301      	movs	r3, #1
 8000e78:	ca06      	ldmia	r2, {r1, r2}
 8000e7a:	48bf      	ldr	r0, [pc, #764]	@ (8001178 <main+0x878>)
 8000e7c:	f000 fdfc 	bl	8001a78 <ssd1306_WriteString>
	  					 chick=1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
 8000e86:	e008      	b.n	8000e9a <main+0x59a>
	  					 }
	  					 else{
	  						 chick=1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	f887 324e 	strb.w	r3, [r7, #590]	@ 0x24e
	  					 ssd1306_WriteString("S loves Z!\n", Font_7x10, White);
 8000e8e:	4ab7      	ldr	r2, [pc, #732]	@ (800116c <main+0x86c>)
 8000e90:	2301      	movs	r3, #1
 8000e92:	ca06      	ldmia	r2, {r1, r2}
 8000e94:	48b9      	ldr	r0, [pc, #740]	@ (800117c <main+0x87c>)
 8000e96:	f000 fdef 	bl	8001a78 <ssd1306_WriteString>
	  					 }

	  					 ssd1306_SetCursor(2, 20);
 8000e9a:	2114      	movs	r1, #20
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f000 fe11 	bl	8001ac4 <ssd1306_SetCursor>
	  					 char score[4];
	  					 ssd1306_WriteString("score: ", Font_7x10, White);
 8000ea2:	4ab2      	ldr	r2, [pc, #712]	@ (800116c <main+0x86c>)
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	ca06      	ldmia	r2, {r1, r2}
 8000ea8:	48b5      	ldr	r0, [pc, #724]	@ (8001180 <main+0x880>)
 8000eaa:	f000 fde5 	bl	8001a78 <ssd1306_WriteString>
	  					 ssd1306_SetCursor(51, 20);
 8000eae:	2114      	movs	r1, #20
 8000eb0:	2033      	movs	r0, #51	@ 0x33
 8000eb2:	f000 fe07 	bl	8001ac4 <ssd1306_SetCursor>
	  					  sprintf(score, "%d", scorei);
 8000eb6:	f897 2243 	ldrb.w	r2, [r7, #579]	@ 0x243
 8000eba:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8000ebe:	49b1      	ldr	r1, [pc, #708]	@ (8001184 <main+0x884>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fe89 	bl	8003bd8 <siprintf>
	  					  ssd1306_WriteString(score, Font_7x10, White);
 8000ec6:	4aa9      	ldr	r2, [pc, #676]	@ (800116c <main+0x86c>)
 8000ec8:	f507 7001 	add.w	r0, r7, #516	@ 0x204
 8000ecc:	2301      	movs	r3, #1
 8000ece:	ca06      	ldmia	r2, {r1, r2}
 8000ed0:	f000 fdd2 	bl	8001a78 <ssd1306_WriteString>
	  					  saved_stats.money+=(scorei);
 8000ed4:	4bac      	ldr	r3, [pc, #688]	@ (8001188 <main+0x888>)
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8000ede:	4413      	add	r3, r2
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4ba9      	ldr	r3, [pc, #676]	@ (8001188 <main+0x888>)
 8000ee4:	705a      	strb	r2, [r3, #1]
	  					  ssd1306_UpdateScreen();
 8000ee6:	f000 fec1 	bl	8001c6c <ssd1306_UpdateScreen>

	  					 while(1){
	  						 HAL_Delay(20);
 8000eea:	2014      	movs	r0, #20
 8000eec:	f000 ff78 	bl	8001de0 <HAL_Delay>
	  					 if(GPIO_PIN_RESET==HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7)){
 8000ef0:	2180      	movs	r1, #128	@ 0x80
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ef6:	f001 fc5d 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1f4      	bne.n	8000eea <main+0x5ea>
	  					 game_mode=0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
	  					 HAL_Delay(20);
 8000f06:	2014      	movs	r0, #20
 8000f08:	f000 ff6a 	bl	8001de0 <HAL_Delay>
	  					 while(1){
	  						 if(GPIO_PIN_SET==HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7))
 8000f0c:	2180      	movs	r1, #128	@ 0x80
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f12:	f001 fc4f 	bl	80027b4 <HAL_GPIO_ReadPin>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d000      	beq.n	8000f1e <main+0x61e>
 8000f1c:	e7f6      	b.n	8000f0c <main+0x60c>
	  							 break;
 8000f1e:	bf00      	nop
	  					 }
	  					 break;
	  					 }
	  					 }
	  				 }
	  				 if(game_mode==0)
 8000f20:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 8142 	beq.w	80011ae <main+0x8ae>
	  					 break;
	  				 HAL_Delay(230);
 8000f2a:	20e6      	movs	r0, #230	@ 0xe6
 8000f2c:	f000 ff58 	bl	8001de0 <HAL_Delay>

	  			 check_joystick();
 8000f30:	f7ff fcde 	bl	80008f0 <check_joystick>

	  	 		  if(joystick.x<800 && direction!=0){
 8000f34:	4b95      	ldr	r3, [pc, #596]	@ (800118c <main+0x88c>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000f3c:	d207      	bcs.n	8000f4e <main+0x64e>
 8000f3e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <main+0x64e>
	  	 			  direction=1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8000f4c:	e027      	b.n	8000f9e <main+0x69e>
	  		  		  }
	  		  	else if(joystick.x>3500 &&direction!=1){
 8000f4e:	4b8f      	ldr	r3, [pc, #572]	@ (800118c <main+0x88c>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d907      	bls.n	8000f6a <main+0x66a>
 8000f5a:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d003      	beq.n	8000f6a <main+0x66a>
	  		  		direction=0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8000f68:	e019      	b.n	8000f9e <main+0x69e>
	  		  	}
	  		  	else if(joystick.y>3500 && direction!=3){
 8000f6a:	4b88      	ldr	r3, [pc, #544]	@ (800118c <main+0x88c>)
 8000f6c:	885b      	ldrh	r3, [r3, #2]
 8000f6e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d907      	bls.n	8000f86 <main+0x686>
 8000f76:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d003      	beq.n	8000f86 <main+0x686>
	  		  		direction=2;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
 8000f84:	e00b      	b.n	8000f9e <main+0x69e>
	  		  	}
	  		  	else if(joystick.y<800 && direction!=2){
 8000f86:	4b81      	ldr	r3, [pc, #516]	@ (800118c <main+0x88c>)
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8000f8e:	d206      	bcs.n	8000f9e <main+0x69e>
 8000f90:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d002      	beq.n	8000f9e <main+0x69e>
	  		  		direction=3;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
	  		  }

	  			 //move snake forward
	  			 if(direction==0){ //right
 8000f9e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d120      	bne.n	8000fe8 <main+0x6e8>
	  			 snakex[head+1]=snakex[head]+5;
 8000fa6:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000faa:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000fae:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000fb2:	5cd2      	ldrb	r2, [r2, r3]
 8000fb4:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000fb8:	3301      	adds	r3, #1
 8000fba:	3205      	adds	r2, #5
 8000fbc:	b2d1      	uxtb	r1, r2
 8000fbe:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000fc2:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000fc6:	54d1      	strb	r1, [r2, r3]
	  			 snakey[head+1]=snakey[head];
 8000fc8:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 8000fcc:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000fd6:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8000fda:	5c89      	ldrb	r1, [r1, r2]
 8000fdc:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000fe0:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8000fe4:	54d1      	strb	r1, [r2, r3]
 8000fe6:	e06d      	b.n	80010c4 <main+0x7c4>
	  			 }
	  			 else if(direction==1){//left
 8000fe8:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d120      	bne.n	8001032 <main+0x732>
	  				 snakex[head+1]=snakex[head]-5;
 8000ff0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8000ff4:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8000ff8:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8000ffc:	5cd2      	ldrb	r2, [r2, r3]
 8000ffe:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8001002:	3301      	adds	r3, #1
 8001004:	3a05      	subs	r2, #5
 8001006:	b2d1      	uxtb	r1, r2
 8001008:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800100c:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8001010:	54d1      	strb	r1, [r2, r3]
	  			 snakey[head+1]=snakey[head];
 8001012:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 8001016:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800101a:	3301      	adds	r3, #1
 800101c:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8001020:	f5a1 71a6 	sub.w	r1, r1, #332	@ 0x14c
 8001024:	5c89      	ldrb	r1, [r1, r2]
 8001026:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800102a:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800102e:	54d1      	strb	r1, [r2, r3]
 8001030:	e048      	b.n	80010c4 <main+0x7c4>
	  			 }
	  			 else if(direction==3){//up
 8001032:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8001036:	2b03      	cmp	r3, #3
 8001038:	d120      	bne.n	800107c <main+0x77c>
	  				 snakey[head+1]=snakey[head]-5;
 800103a:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800103e:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001042:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8001046:	5cd2      	ldrb	r2, [r2, r3]
 8001048:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800104c:	3301      	adds	r3, #1
 800104e:	3a05      	subs	r2, #5
 8001050:	b2d1      	uxtb	r1, r2
 8001052:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001056:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800105a:	54d1      	strb	r1, [r2, r3]
	  			 snakex[head+1]=snakex[head];
 800105c:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 8001060:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8001064:	3301      	adds	r3, #1
 8001066:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 800106a:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 800106e:	5c89      	ldrb	r1, [r1, r2]
 8001070:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8001074:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 8001078:	54d1      	strb	r1, [r2, r3]
 800107a:	e023      	b.n	80010c4 <main+0x7c4>
	  			 }
	  			 else if(direction==2){//down
 800107c:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8001080:	2b02      	cmp	r3, #2
 8001082:	d11f      	bne.n	80010c4 <main+0x7c4>
	  			 snakey[head+1]=snakey[head]+5;
 8001084:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8001088:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800108c:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 8001090:	5cd2      	ldrb	r2, [r2, r3]
 8001092:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8001096:	3301      	adds	r3, #1
 8001098:	3205      	adds	r2, #5
 800109a:	b2d1      	uxtb	r1, r2
 800109c:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80010a0:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80010a4:	54d1      	strb	r1, [r2, r3]
	  			 snakex[head+1]=snakex[head];
 80010a6:	f897 224b 	ldrb.w	r2, [r7, #587]	@ 0x24b
 80010aa:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80010ae:	3301      	adds	r3, #1
 80010b0:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 80010b4:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 80010b8:	5c89      	ldrb	r1, [r1, r2]
 80010ba:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80010be:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80010c2:	54d1      	strb	r1, [r2, r3]
	  			 }
	  			 head++;
 80010c4:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80010c8:	3301      	adds	r3, #1
 80010ca:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b

	  			 if(snakex[head]==foodx && snakey[head]==foody){//on food box,
 80010ce:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80010d2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80010d6:	f5a2 7213 	sub.w	r2, r2, #588	@ 0x24c
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	f897 224d 	ldrb.w	r2, [r7, #589]	@ 0x24d
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d159      	bne.n	8001198 <main+0x898>
 80010e4:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 80010e8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80010ec:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	f897 224c 	ldrb.w	r2, [r7, #588]	@ 0x24c
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d14e      	bne.n	8001198 <main+0x898>

	  				 foodx=((HAL_GetTick()%23)+1)*5;//semi random way to set new food location
 80010fa:	f000 fe65 	bl	8001dc8 <HAL_GetTick>
 80010fe:	4601      	mov	r1, r0
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <main+0x890>)
 8001102:	fba3 2301 	umull	r2, r3, r3, r1
 8001106:	091a      	lsrs	r2, r3, #4
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	1aca      	subs	r2, r1, r3
 8001114:	1c53      	adds	r3, r2, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4413      	add	r3, r2
 800111e:	f887 324d 	strb.w	r3, [r7, #589]	@ 0x24d
	  				 foody=((HAL_GetTick()>>4)%11)*5;
 8001122:	f000 fe51 	bl	8001dc8 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	0919      	lsrs	r1, r3, #4
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <main+0x894>)
 800112c:	fba3 2301 	umull	r2, r3, r3, r1
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	1aca      	subs	r2, r1, r3
 800113e:	b2d3      	uxtb	r3, r2
 8001140:	461a      	mov	r2, r3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4413      	add	r3, r2
 8001146:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c

	  				 ssd1306_FillRectangle(foodx,foody,foodx+5,foody+5, White);//move food box
 800114a:	f897 324d 	ldrb.w	r3, [r7, #589]	@ 0x24d
 800114e:	3305      	adds	r3, #5
 8001150:	b2da      	uxtb	r2, r3
 8001152:	f897 324c 	ldrb.w	r3, [r7, #588]	@ 0x24c
 8001156:	3305      	adds	r3, #5
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f897 124c 	ldrb.w	r1, [r7, #588]	@ 0x24c
 800115e:	f897 024d 	ldrb.w	r0, [r7, #589]	@ 0x24d
 8001162:	2401      	movs	r4, #1
 8001164:	9400      	str	r4, [sp, #0]
 8001166:	f000 fcc5 	bl	8001af4 <ssd1306_FillRectangle>
 800116a:	e01f      	b.n	80011ac <main+0x8ac>
 800116c:	2000000c 	.word	0x2000000c
 8001170:	0800457c 	.word	0x0800457c
 8001174:	08004590 	.word	0x08004590
 8001178:	080045a4 	.word	0x080045a4
 800117c:	080045b4 	.word	0x080045b4
 8001180:	080045c0 	.word	0x080045c0
 8001184:	08004548 	.word	0x08004548
 8001188:	200000ac 	.word	0x200000ac
 800118c:	200000b0 	.word	0x200000b0
 8001190:	b21642c9 	.word	0xb21642c9
 8001194:	ba2e8ba3 	.word	0xba2e8ba3

	  			 }
	  			 else if(head>4)
 8001198:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 800119c:	2b04      	cmp	r3, #4
 800119e:	f67f ad96 	bls.w	8000cce <main+0x3ce>
	  			 tail++;//if on a food don't move tail forward(make snake larger)
 80011a2:	f897 3249 	ldrb.w	r3, [r7, #585]	@ 0x249
 80011a6:	3301      	adds	r3, #1
 80011a8:	f887 3249 	strb.w	r3, [r7, #585]	@ 0x249
	  				 ssd1306_FillRectangle(snakex[tail],snakey[tail],snakex[tail]+5,snakey[tail]+5, Black);
 80011ac:	e58f      	b.n	8000cce <main+0x3ce>
	  					 break;
 80011ae:	bf00      	nop
	  				 }

	  			 }
	  			 ssd1306_UpdateScreen();
 80011b0:	f000 fd5c 	bl	8001c6c <ssd1306_UpdateScreen>
	  switch(game_mode){
 80011b4:	f7ff bbe3 	b.w	800097e <main+0x7e>

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	@ 0x58
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	2244      	movs	r2, #68	@ 0x44
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fd26 	bl	8003c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011de:	f001 fb27 	bl	8002830 <HAL_PWREx_ControlVoltageScaling>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e8:	f000 f922 	bl	8001430 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ec:	2302      	movs	r3, #2
 80011ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f6:	2310      	movs	r3, #16
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fa:	2302      	movs	r3, #2
 80011fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fe:	2302      	movs	r3, #2
 8001200:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001206:	2308      	movs	r3, #8
 8001208:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800120a:	2307      	movs	r3, #7
 800120c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001212:	2302      	movs	r3, #2
 8001214:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fb5e 	bl	80028dc <HAL_RCC_OscConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001226:	f000 f903 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122a:	230f      	movs	r3, #15
 800122c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122e:	2303      	movs	r3, #3
 8001230:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f001 ff5e 	bl	8003104 <HAL_RCC_ClockConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800124e:	f000 f8ef 	bl	8001430 <Error_Handler>
  }
}
 8001252:	bf00      	nop
 8001254:	3758      	adds	r7, #88	@ 0x58
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <MX_SPI1_Init+0x78>)
 8001264:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001268:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800126c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001276:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800127a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_SPI1_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_SPI1_Init+0x74>)
 800128a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800128e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001292:	2238      	movs	r2, #56	@ 0x38
 8001294:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001296:	4b0e      	ldr	r3, [pc, #56]	@ (80012d0 <MX_SPI1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129c:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <MX_SPI1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	@ (80012d0 <MX_SPI1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80012a8:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <MX_SPI1_Init+0x74>)
 80012aa:	2207      	movs	r2, #7
 80012ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <MX_SPI1_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012b4:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <MX_SPI1_Init+0x74>)
 80012b6:	2208      	movs	r2, #8
 80012b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_SPI1_Init+0x74>)
 80012bc:	f002 f90e 	bl	80034dc <HAL_SPI_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 f8b3 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000b4 	.word	0x200000b4
 80012d4:	40013000 	.word	0x40013000

080012d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_SPI3_Init+0x74>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <MX_SPI3_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_SPI3_Init+0x74>)
 80012e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_SPI3_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_SPI3_Init+0x74>)
 80012f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <MX_SPI3_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <MX_SPI3_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001304:	4b11      	ldr	r3, [pc, #68]	@ (800134c <MX_SPI3_Init+0x74>)
 8001306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800130a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800130c:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <MX_SPI3_Init+0x74>)
 800130e:	2218      	movs	r2, #24
 8001310:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <MX_SPI3_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <MX_SPI3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <MX_SPI3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <MX_SPI3_Init+0x74>)
 8001326:	2207      	movs	r2, #7
 8001328:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <MX_SPI3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <MX_SPI3_Init+0x74>)
 8001332:	2208      	movs	r2, #8
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_SPI3_Init+0x74>)
 8001338:	f002 f8d0 	bl	80034dc <HAL_SPI_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 f875 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000118 	.word	0x20000118
 8001350:	40003c00 	.word	0x40003c00

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <MX_GPIO_Init+0xd0>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a2d      	ldr	r2, [pc, #180]	@ (8001424 <MX_GPIO_Init+0xd0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <MX_GPIO_Init+0xd0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <MX_GPIO_Init+0xd0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <MX_GPIO_Init+0xd0>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <MX_GPIO_Init+0xd0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a4:	f001 fa1e 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2180      	movs	r1, #128	@ 0x80
 80013ac:	481e      	ldr	r0, [pc, #120]	@ (8001428 <MX_GPIO_Init+0xd4>)
 80013ae:	f001 fa19 	bl	80027e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013b2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80013b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f001 f887 	bl	80024e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ee:	f001 f877 	bl	80024e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fe:	2303      	movs	r3, #3
 8001400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_GPIO_Init+0xd4>)
 800140a:	f001 f869 	bl	80024e0 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <MX_GPIO_Init+0xd8>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a06      	ldr	r2, [pc, #24]	@ (800142c <MX_GPIO_Init+0xd8>)
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	6053      	str	r3, [r2, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	48000400 	.word	0x48000400
 800142c:	40010000 	.word	0x40010000

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <Error_Handler+0x8>

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_MspInit+0x44>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	@ 0x60
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_MspInit+0x44>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_MspInit+0x44>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001464:	6593      	str	r3, [r2, #88]	@ 0x58
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_MspInit+0x44>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	@ 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001560 <HAL_SPI_MspInit+0xdc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d12a      	bne.n	80014fc <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 80014ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 80014b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b29      	ldr	r3, [pc, #164]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c2:	4a28      	ldr	r2, [pc, #160]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_12;
 80014d6:	f44f 5383 	mov.w	r3, #4192	@ 0x1060
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e8:	2305      	movs	r3, #5
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f6:	f000 fff3 	bl	80024e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014fa:	e02c      	b.n	8001556 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a19      	ldr	r2, [pc, #100]	@ (8001568 <HAL_SPI_MspInit+0xe4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d127      	bne.n	8001556 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800150a:	4a16      	ldr	r2, [pc, #88]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 800150c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001510:	6593      	str	r3, [r2, #88]	@ 0x58
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001516:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	4a10      	ldr	r2, [pc, #64]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_SPI_MspInit+0xe0>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001536:	2328      	movs	r3, #40	@ 0x28
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001546:	2306      	movs	r3, #6
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4806      	ldr	r0, [pc, #24]	@ (800156c <HAL_SPI_MspInit+0xe8>)
 8001552:	f000 ffc5 	bl	80024e0 <HAL_GPIO_Init>
}
 8001556:	bf00      	nop
 8001558:	3730      	adds	r7, #48	@ 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40013000 	.word	0x40013000
 8001564:	40021000 	.word	0x40021000
 8001568:	40003c00 	.word	0x40003c00
 800156c:	48000400 	.word	0x48000400

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 fbeb 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d8:	4a14      	ldr	r2, [pc, #80]	@ (800162c <_sbrk+0x5c>)
 80015da:	4b15      	ldr	r3, [pc, #84]	@ (8001630 <_sbrk+0x60>)
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e4:	4b13      	ldr	r3, [pc, #76]	@ (8001634 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d102      	bne.n	80015f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ec:	4b11      	ldr	r3, [pc, #68]	@ (8001634 <_sbrk+0x64>)
 80015ee:	4a12      	ldr	r2, [pc, #72]	@ (8001638 <_sbrk+0x68>)
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <_sbrk+0x64>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d207      	bcs.n	8001610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001600:	f002 fb12 	bl	8003c28 <__errno>
 8001604:	4603      	mov	r3, r0
 8001606:	220c      	movs	r2, #12
 8001608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e009      	b.n	8001624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001616:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <_sbrk+0x64>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <_sbrk+0x64>)
 8001620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20010000 	.word	0x20010000
 8001630:	00000400 	.word	0x00000400
 8001634:	2000017c 	.word	0x2000017c
 8001638:	200006d8 	.word	0x200006d8

0800163c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001664:	f7ff ffea 	bl	800163c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	@ (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	@ (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f002 fad1 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001692:	f7ff f935 	bl	8000900 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001698:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80016a4:	08005ed8 	.word	0x08005ed8
  ldr r2, =_sbss
 80016a8:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80016ac:	200006d4 	.word	0x200006d4

080016b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_IRQHandler>

080016b2 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c0:	f001 f890 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ce:	f001 f889 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016d2:	200a      	movs	r0, #10
 80016d4:	f000 fb84 	bl	8001de0 <HAL_Delay>
    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e2:	f001 f87f 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016e6:	200a      	movs	r0, #10
 80016e8:	f000 fb7a 	bl	8001de0 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f6:	f001 f875 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80016fa:	200a      	movs	r0, #10
 80016fc:	f000 fb70 	bl	8001de0 <HAL_Delay>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f001 f864 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800171c:	2200      	movs	r2, #0
 800171e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001726:	f001 f85d 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 800172a:	1df9      	adds	r1, r7, #7
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	2201      	movs	r2, #1
 8001732:	4807      	ldr	r0, [pc, #28]	@ (8001750 <ssd1306_WriteCommand+0x4c>)
 8001734:	f001 ff75 	bl	8003622 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8001738:	2201      	movs	r2, #1
 800173a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800173e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001742:	f001 f84f 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000118 	.word	0x20000118

08001754 <ssd1306_WriteData>:




// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800175e:	2200      	movs	r2, #0
 8001760:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001768:	f001 f83c 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 800176c:	2201      	movs	r2, #1
 800176e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001776:	f001 f835 	bl	80027e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size,HAL_MAX_DELAY);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <ssd1306_WriteData+0x4c>)
 8001786:	f001 ff4c 	bl	8003622 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001794:	f001 f826 	bl	80027e4 <HAL_GPIO_WritePin>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000118 	.word	0x20000118

080017a4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80017a8:	f7ff ff83 	bl	80016b2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80017ac:	2064      	movs	r0, #100	@ 0x64
 80017ae:	f000 fb17 	bl	8001de0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 fa82 	bl	8001cbc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80017b8:	2020      	movs	r0, #32
 80017ba:	f7ff ffa3 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff ffa0 	bl	8001704 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017c4:	20b0      	movs	r0, #176	@ 0xb0
 80017c6:	f7ff ff9d 	bl	8001704 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017ca:	20c8      	movs	r0, #200	@ 0xc8
 80017cc:	f7ff ff9a 	bl	8001704 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff ff97 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017d6:	2010      	movs	r0, #16
 80017d8:	f7ff ff94 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017dc:	2040      	movs	r0, #64	@ 0x40
 80017de:	f7ff ff91 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017e2:	20ff      	movs	r0, #255	@ 0xff
 80017e4:	f000 fa2f 	bl	8001c46 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017e8:	20a1      	movs	r0, #161	@ 0xa1
 80017ea:	f7ff ff8b 	bl	8001704 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017ee:	20a6      	movs	r0, #166	@ 0xa6
 80017f0:	f7ff ff88 	bl	8001704 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017f4:	20a8      	movs	r0, #168	@ 0xa8
 80017f6:	f7ff ff85 	bl	8001704 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80017fa:	203f      	movs	r0, #63	@ 0x3f
 80017fc:	f7ff ff82 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001800:	20a4      	movs	r0, #164	@ 0xa4
 8001802:	f7ff ff7f 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001806:	20d3      	movs	r0, #211	@ 0xd3
 8001808:	f7ff ff7c 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ff79 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001812:	20d5      	movs	r0, #213	@ 0xd5
 8001814:	f7ff ff76 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001818:	20f0      	movs	r0, #240	@ 0xf0
 800181a:	f7ff ff73 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800181e:	20d9      	movs	r0, #217	@ 0xd9
 8001820:	f7ff ff70 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001824:	2022      	movs	r0, #34	@ 0x22
 8001826:	f7ff ff6d 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800182a:	20da      	movs	r0, #218	@ 0xda
 800182c:	f7ff ff6a 	bl	8001704 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001830:	2012      	movs	r0, #18
 8001832:	f7ff ff67 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001836:	20db      	movs	r0, #219	@ 0xdb
 8001838:	f7ff ff64 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800183c:	2020      	movs	r0, #32
 800183e:	f7ff ff61 	bl	8001704 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001842:	208d      	movs	r0, #141	@ 0x8d
 8001844:	f7ff ff5e 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001848:	2014      	movs	r0, #20
 800184a:	f7ff ff5b 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800184e:	2001      	movs	r0, #1
 8001850:	f000 fa34 	bl	8001cbc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001854:	2000      	movs	r0, #0
 8001856:	f000 f80f 	bl	8001878 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800185a:	f000 fa07 	bl	8001c6c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <ssd1306_Init+0xd0>)
 8001860:	2200      	movs	r2, #0
 8001862:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <ssd1306_Init+0xd0>)
 8001866:	2200      	movs	r2, #0
 8001868:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800186a:	4b02      	ldr	r3, [pc, #8]	@ (8001874 <ssd1306_Init+0xd0>)
 800186c:	2201      	movs	r2, #1
 800186e:	711a      	strb	r2, [r3, #4]
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000580 	.word	0x20000580

08001878 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	e00d      	b.n	80018a4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <ssd1306_Fill+0x1a>
 800188e:	2100      	movs	r1, #0
 8001890:	e000      	b.n	8001894 <ssd1306_Fill+0x1c>
 8001892:	21ff      	movs	r1, #255	@ 0xff
 8001894:	4a09      	ldr	r2, [pc, #36]	@ (80018bc <ssd1306_Fill+0x44>)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	460a      	mov	r2, r1
 800189c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018aa:	d3ed      	bcc.n	8001888 <ssd1306_Fill+0x10>
    }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000180 	.word	0x20000180

080018c0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	460b      	mov	r3, r1
 80018cc:	71bb      	strb	r3, [r7, #6]
 80018ce:	4613      	mov	r3, r2
 80018d0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db3d      	blt.n	8001956 <ssd1306_DrawPixel+0x96>
 80018da:	79bb      	ldrb	r3, [r7, #6]
 80018dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80018de:	d83a      	bhi.n	8001956 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80018e0:	797b      	ldrb	r3, [r7, #5]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d11a      	bne.n	800191c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	79bb      	ldrb	r3, [r7, #6]
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	b2d8      	uxtb	r0, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	4413      	add	r3, r2
 80018f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <ssd1306_DrawPixel+0xa4>)
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	b25a      	sxtb	r2, r3
 80018fa:	79bb      	ldrb	r3, [r7, #6]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	b25b      	sxtb	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b259      	sxtb	r1, r3
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	4603      	mov	r3, r0
 8001910:	01db      	lsls	r3, r3, #7
 8001912:	4413      	add	r3, r2
 8001914:	b2c9      	uxtb	r1, r1
 8001916:	4a13      	ldr	r2, [pc, #76]	@ (8001964 <ssd1306_DrawPixel+0xa4>)
 8001918:	54d1      	strb	r1, [r2, r3]
 800191a:	e01d      	b.n	8001958 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800191c:	79fa      	ldrb	r2, [r7, #7]
 800191e:	79bb      	ldrb	r3, [r7, #6]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	4603      	mov	r3, r0
 8001926:	01db      	lsls	r3, r3, #7
 8001928:	4413      	add	r3, r2
 800192a:	4a0e      	ldr	r2, [pc, #56]	@ (8001964 <ssd1306_DrawPixel+0xa4>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	b25a      	sxtb	r2, r3
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	b25b      	sxtb	r3, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	b25b      	sxtb	r3, r3
 8001942:	4013      	ands	r3, r2
 8001944:	b259      	sxtb	r1, r3
 8001946:	79fa      	ldrb	r2, [r7, #7]
 8001948:	4603      	mov	r3, r0
 800194a:	01db      	lsls	r3, r3, #7
 800194c:	4413      	add	r3, r2
 800194e:	b2c9      	uxtb	r1, r1
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <ssd1306_DrawPixel+0xa4>)
 8001952:	54d1      	strb	r1, [r2, r3]
 8001954:	e000      	b.n	8001958 <ssd1306_DrawPixel+0x98>
        return;
 8001956:	bf00      	nop
    }
}
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000180 	.word	0x20000180

08001968 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b089      	sub	sp, #36	@ 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	4604      	mov	r4, r0
 8001970:	1d38      	adds	r0, r7, #4
 8001972:	e880 0006 	stmia.w	r0, {r1, r2}
 8001976:	461a      	mov	r2, r3
 8001978:	4623      	mov	r3, r4
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	4613      	mov	r3, r2
 800197e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	2b1f      	cmp	r3, #31
 8001984:	d902      	bls.n	800198c <ssd1306_WriteChar+0x24>
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	2b7e      	cmp	r3, #126	@ 0x7e
 800198a:	d901      	bls.n	8001990 <ssd1306_WriteChar+0x28>
        return 0;
 800198c:	2300      	movs	r3, #0
 800198e:	e06c      	b.n	8001a6a <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001990:	4b38      	ldr	r3, [pc, #224]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	793b      	ldrb	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	2b80      	cmp	r3, #128	@ 0x80
 800199c:	dc06      	bgt.n	80019ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800199e:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 80019a0:	885b      	ldrh	r3, [r3, #2]
 80019a2:	461a      	mov	r2, r3
 80019a4:	797b      	ldrb	r3, [r7, #5]
 80019a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80019a8:	2b40      	cmp	r3, #64	@ 0x40
 80019aa:	dd01      	ble.n	80019b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e05c      	b.n	8001a6a <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	e04c      	b.n	8001a50 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	3b20      	subs	r3, #32
 80019bc:	7979      	ldrb	r1, [r7, #5]
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	440b      	add	r3, r1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
 80019d4:	e034      	b.n	8001a40 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019e6:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b2d8      	uxtb	r0, r3
 80019f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 80019f6:	885b      	ldrh	r3, [r3, #2]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	7bba      	ldrb	r2, [r7, #14]
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff ff5b 	bl	80018c0 <ssd1306_DrawPixel>
 8001a0a:	e016      	b.n	8001a3a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a0c:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b2d8      	uxtb	r0, r3
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 8001a1c:	885b      	ldrh	r3, [r3, #2]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	b2d9      	uxtb	r1, r3
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	461a      	mov	r2, r3
 8001a36:	f7ff ff43 	bl	80018c0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	793b      	ldrb	r3, [r7, #4]
 8001a42:	461a      	mov	r2, r3
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d3c5      	bcc.n	80019d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	61fb      	str	r3, [r7, #28]
 8001a50:	797b      	ldrb	r3, [r7, #5]
 8001a52:	461a      	mov	r2, r3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d3ad      	bcc.n	80019b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	793a      	ldrb	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <ssd1306_WriteChar+0x10c>)
 8001a66:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000580 	.word	0x20000580

08001a78 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	1d38      	adds	r0, r7, #4
 8001a82:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a86:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001a88:	e012      	b.n	8001ab0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	7818      	ldrb	r0, [r3, #0]
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	1d3a      	adds	r2, r7, #4
 8001a92:	ca06      	ldmia	r2, {r1, r2}
 8001a94:	f7ff ff68 	bl	8001968 <ssd1306_WriteChar>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d002      	beq.n	8001aaa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	e008      	b.n	8001abc <ssd1306_WriteString+0x44>
        }
        str++;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3301      	adds	r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1e8      	bne.n	8001a8a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	781b      	ldrb	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	71fb      	strb	r3, [r7, #7]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <ssd1306_SetCursor+0x2c>)
 8001ada:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <ssd1306_SetCursor+0x2c>)
 8001ae2:	805a      	strh	r2, [r3, #2]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	20000580 	.word	0x20000580

08001af4 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	4603      	mov	r3, r0
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	717b      	strb	r3, [r7, #5]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	797b      	ldrb	r3, [r7, #5]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	bf28      	it	cs
 8001b1a:	4613      	movcs	r3, r2
 8001b1c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001b1e:	797a      	ldrb	r2, [r7, #5]
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	4293      	cmp	r3, r2
 8001b24:	bf38      	it	cc
 8001b26:	4613      	movcc	r3, r2
 8001b28:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001b2a:	79ba      	ldrb	r2, [r7, #6]
 8001b2c:	793b      	ldrb	r3, [r7, #4]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	bf28      	it	cs
 8001b32:	4613      	movcs	r3, r2
 8001b34:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8001b36:	793a      	ldrb	r2, [r7, #4]
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	bf38      	it	cc
 8001b3e:	4613      	movcc	r3, r2
 8001b40:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b42:	7afb      	ldrb	r3, [r7, #11]
 8001b44:	73fb      	strb	r3, [r7, #15]
 8001b46:	e017      	b.n	8001b78 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b48:	7b7b      	ldrb	r3, [r7, #13]
 8001b4a:	73bb      	strb	r3, [r7, #14]
 8001b4c:	e009      	b.n	8001b62 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8001b4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b52:	7bf9      	ldrb	r1, [r7, #15]
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff feb2 	bl	80018c0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73bb      	strb	r3, [r7, #14]
 8001b62:	7bba      	ldrb	r2, [r7, #14]
 8001b64:	7b3b      	ldrb	r3, [r7, #12]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d803      	bhi.n	8001b72 <ssd1306_FillRectangle+0x7e>
 8001b6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	daed      	bge.n	8001b4e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	7abb      	ldrb	r3, [r7, #10]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d803      	bhi.n	8001b88 <ssd1306_FillRectangle+0x94>
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b84:	d9e0      	bls.n	8001b48 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
}
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	603a      	str	r2, [r7, #0]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	71bb      	strb	r3, [r7, #6]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001ba6:	797b      	ldrb	r3, [r7, #5]
 8001ba8:	3307      	adds	r3, #7
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da00      	bge.n	8001bb0 <ssd1306_DrawBitmap+0x20>
 8001bae:	3307      	adds	r3, #7
 8001bb0:	10db      	asrs	r3, r3, #3
 8001bb2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db3e      	blt.n	8001c3e <ssd1306_DrawBitmap+0xae>
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bc4:	d83b      	bhi.n	8001c3e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73bb      	strb	r3, [r7, #14]
 8001bca:	e033      	b.n	8001c34 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	737b      	strb	r3, [r7, #13]
 8001bd0:	e026      	b.n	8001c20 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001bd2:	7b7b      	ldrb	r3, [r7, #13]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e00d      	b.n	8001c00 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	7b7a      	ldrb	r2, [r7, #13]
 8001bf0:	08d2      	lsrs	r2, r2, #3
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	da08      	bge.n	8001c1a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	7b7b      	ldrb	r3, [r7, #13]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	7f3a      	ldrb	r2, [r7, #28]
 8001c12:	79b9      	ldrb	r1, [r7, #6]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fe53 	bl	80018c0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001c1a:	7b7b      	ldrb	r3, [r7, #13]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	737b      	strb	r3, [r7, #13]
 8001c20:	7b7a      	ldrb	r2, [r7, #13]
 8001c22:	797b      	ldrb	r3, [r7, #5]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3d4      	bcc.n	8001bd2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	73bb      	strb	r3, [r7, #14]
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	3301      	adds	r3, #1
 8001c32:	71bb      	strb	r3, [r7, #6]
 8001c34:	7bba      	ldrb	r2, [r7, #14]
 8001c36:	7e3b      	ldrb	r3, [r7, #24]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d3c7      	bcc.n	8001bcc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001c3c:	e000      	b.n	8001c40 <ssd1306_DrawBitmap+0xb0>
        return;
 8001c3e:	bf00      	nop
}
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <ssd1306_SetContrast>:
    ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
    ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
    ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*page],SSD1306_WIDTH);

}
void ssd1306_SetContrast(const uint8_t value) {
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c50:	2381      	movs	r3, #129	@ 0x81
 8001c52:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fd54 	bl	8001704 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fd50 	bl	8001704 <ssd1306_WriteCommand>
}
 8001c64:	bf00      	nop
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ssd1306_UpdateScreen>:

void ssd1306_UpdateScreen(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0

    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	71fb      	strb	r3, [r7, #7]
 8001c76:	e016      	b.n	8001ca6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	3b50      	subs	r3, #80	@ 0x50
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fd40 	bl	8001704 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f7ff fd3d 	bl	8001704 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001c8a:	2010      	movs	r0, #16
 8001c8c:	f7ff fd3a 	bl	8001704 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	01db      	lsls	r3, r3, #7
 8001c94:	4a08      	ldr	r2, [pc, #32]	@ (8001cb8 <ssd1306_UpdateScreen+0x4c>)
 8001c96:	4413      	add	r3, r2
 8001c98:	2180      	movs	r1, #128	@ 0x80
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fd5a 	bl	8001754 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	71fb      	strb	r3, [r7, #7]
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b07      	cmp	r3, #7
 8001caa:	d9e5      	bls.n	8001c78 <ssd1306_UpdateScreen+0xc>
    }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000180 	.word	0x20000180

08001cbc <ssd1306_SetDisplayOn>:


void ssd1306_SetDisplayOn(const uint8_t on) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ccc:	23af      	movs	r3, #175	@ 0xaf
 8001cce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <ssd1306_SetDisplayOn+0x38>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	715a      	strb	r2, [r3, #5]
 8001cd6:	e004      	b.n	8001ce2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001cd8:	23ae      	movs	r3, #174	@ 0xae
 8001cda:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <ssd1306_SetDisplayOn+0x38>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fd0d 	bl	8001704 <ssd1306_WriteCommand>
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000580 	.word	0x20000580

08001cf8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d02:	2003      	movs	r0, #3
 8001d04:	f000 f942 	bl	8001f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d08:	200f      	movs	r0, #15
 8001d0a:	f000 f80d 	bl	8001d28 <HAL_InitTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	e001      	b.n	8001d1e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d1a:	f7ff fb8f 	bl	800143c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <HAL_InitTick+0x6c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d023      	beq.n	8001d84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <HAL_InitTick+0x70>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <HAL_InitTick+0x6c>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	4619      	mov	r1, r3
 8001d46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 f941 	bl	8001fda <HAL_SYSTICK_Config>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b0f      	cmp	r3, #15
 8001d62:	d809      	bhi.n	8001d78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d64:	2200      	movs	r2, #0
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295
 8001d6c:	f000 f919 	bl	8001fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d70:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <HAL_InitTick+0x74>)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e007      	b.n	8001d88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	e004      	b.n	8001d88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e001      	b.n	8001d88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000018 	.word	0x20000018
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000014 	.word	0x20000014

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000018 	.word	0x20000018
 8001dc4:	20000588 	.word	0x20000588

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	20000588 	.word	0x20000588

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000018 	.word	0x20000018

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	db0a      	blt.n	8001eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <__NVIC_SetPriority+0x4c>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	0112      	lsls	r2, r2, #4
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	440b      	add	r3, r1
 8001eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb4:	e00a      	b.n	8001ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4908      	ldr	r1, [pc, #32]	@ (8001edc <__NVIC_SetPriority+0x50>)
 8001ebc:	79fb      	ldrb	r3, [r7, #7]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	3b04      	subs	r3, #4
 8001ec4:	0112      	lsls	r2, r2, #4
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	440b      	add	r3, r1
 8001eca:	761a      	strb	r2, [r3, #24]
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000e100 	.word	0xe000e100
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f1c3 0307 	rsb	r3, r3, #7
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	bf28      	it	cs
 8001efe:	2304      	movcs	r3, #4
 8001f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3304      	adds	r3, #4
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d902      	bls.n	8001f10 <NVIC_EncodePriority+0x30>
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3b03      	subs	r3, #3
 8001f0e:	e000      	b.n	8001f12 <NVIC_EncodePriority+0x32>
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43da      	mvns	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	401a      	ands	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f32:	43d9      	mvns	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	4313      	orrs	r3, r2
         );
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3724      	adds	r7, #36	@ 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f58:	d301      	bcc.n	8001f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00f      	b.n	8001f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <SysTick_Config+0x40>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f66:	210f      	movs	r1, #15
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f7ff ff8e 	bl	8001e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <SysTick_Config+0x40>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f76:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <SysTick_Config+0x40>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	e000e010 	.word	0xe000e010

08001f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ff47 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	4603      	mov	r3, r0
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff5c 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff8e 	bl	8001ee0 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffb0 	bl	8001f48 <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002006:	4b2f      	ldr	r3, [pc, #188]	@ (80020c4 <HAL_FLASH_Program+0xd0>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_FLASH_Program+0x1e>
 800200e:	2302      	movs	r3, #2
 8002010:	e053      	b.n	80020ba <HAL_FLASH_Program+0xc6>
 8002012:	4b2c      	ldr	r3, [pc, #176]	@ (80020c4 <HAL_FLASH_Program+0xd0>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002018:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800201c:	f000 f888 	bl	8002130 <FLASH_WaitForLastOperation>
 8002020:	4603      	mov	r3, r0
 8002022:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d143      	bne.n	80020b2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800202a:	4b26      	ldr	r3, [pc, #152]	@ (80020c4 <HAL_FLASH_Program+0xd0>)
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002030:	4b25      	ldr	r3, [pc, #148]	@ (80020c8 <HAL_FLASH_Program+0xd4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002038:	2b00      	cmp	r3, #0
 800203a:	d009      	beq.n	8002050 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800203c:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <HAL_FLASH_Program+0xd4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <HAL_FLASH_Program+0xd4>)
 8002042:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002046:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002048:	4b1e      	ldr	r3, [pc, #120]	@ (80020c4 <HAL_FLASH_Program+0xd0>)
 800204a:	2202      	movs	r2, #2
 800204c:	771a      	strb	r2, [r3, #28]
 800204e:	e002      	b.n	8002056 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002050:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <HAL_FLASH_Program+0xd0>)
 8002052:	2200      	movs	r2, #0
 8002054:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800205c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002060:	68b8      	ldr	r0, [r7, #8]
 8002062:	f000 f8bb 	bl	80021dc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	e010      	b.n	800208e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d002      	beq.n	8002078 <HAL_FLASH_Program+0x84>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d10a      	bne.n	800208e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	68b8      	ldr	r0, [r7, #8]
 800207e:	f000 f8d3 	bl	8002228 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d102      	bne.n	800208e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002088:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800208c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800208e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002092:	f000 f84d 	bl	8002130 <FLASH_WaitForLastOperation>
 8002096:	4603      	mov	r3, r0
 8002098:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_FLASH_Program+0xd4>)
 80020a2:	695a      	ldr	r2, [r3, #20]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	4907      	ldr	r1, [pc, #28]	@ (80020c8 <HAL_FLASH_Program+0xd4>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80020ae:	f000 f9cd 	bl	800244c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020b2:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <HAL_FLASH_Program+0xd0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]

  return status;
 80020b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000001c 	.word	0x2000001c
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80020d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002104 <HAL_FLASH_Unlock+0x38>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	da0b      	bge.n	80020f6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80020de:	4b09      	ldr	r3, [pc, #36]	@ (8002104 <HAL_FLASH_Unlock+0x38>)
 80020e0:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <HAL_FLASH_Unlock+0x3c>)
 80020e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80020e4:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <HAL_FLASH_Unlock+0x38>)
 80020e6:	4a09      	ldr	r2, [pc, #36]	@ (800210c <HAL_FLASH_Unlock+0x40>)
 80020e8:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_FLASH_Unlock+0x38>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da01      	bge.n	80020f6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80020f6:	79fb      	ldrb	r3, [r7, #7]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	40022000 	.word	0x40022000
 8002108:	45670123 	.word	0x45670123
 800210c:	cdef89ab 	.word	0xcdef89ab

08002110 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002114:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_FLASH_Lock+0x1c>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_FLASH_Lock+0x1c>)
 800211a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800211e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40022000 	.word	0x40022000

08002130 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fe46 	bl	8001dc8 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800213e:	e00d      	b.n	800215c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002146:	d009      	beq.n	800215c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002148:	f7ff fe3e 	bl	8001dc8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d801      	bhi.n	800215c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e035      	b.n	80021c8 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800215c:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1eb      	bne.n	8002140 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 800216a:	691a      	ldr	r2, [r3, #16]
 800216c:	4b19      	ldr	r3, [pc, #100]	@ (80021d4 <FLASH_WaitForLastOperation+0xa4>)
 800216e:	4013      	ands	r3, r2
 8002170:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01d      	beq.n	80021b4 <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <FLASH_WaitForLastOperation+0xa8>)
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
 8002180:	4a15      	ldr	r2, [pc, #84]	@ (80021d8 <FLASH_WaitForLastOperation+0xa8>)
 8002182:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800218a:	d307      	bcc.n	800219c <FLASH_WaitForLastOperation+0x6c>
 800218c:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8002196:	490e      	ldr	r1, [pc, #56]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 8002198:	4313      	orrs	r3, r2
 800219a:	618b      	str	r3, [r1, #24]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d004      	beq.n	80021b0 <FLASH_WaitForLastOperation+0x80>
 80021a6:	4a0a      	ldr	r2, [pc, #40]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80021ae:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e009      	b.n	80021c8 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80021c0:	4b03      	ldr	r3, [pc, #12]	@ (80021d0 <FLASH_WaitForLastOperation+0xa0>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40022000 	.word	0x40022000
 80021d4:	0002c3fa 	.word	0x0002c3fa
 80021d8:	2000001c 	.word	0x2000001c

080021dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <FLASH_Program_DoubleWord+0x48>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <FLASH_Program_DoubleWord+0x48>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80021fa:	f3bf 8f6f 	isb	sy
}
 80021fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002200:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	000a      	movs	r2, r1
 800220e:	2300      	movs	r3, #0
 8002210:	68f9      	ldr	r1, [r7, #12]
 8002212:	3104      	adds	r1, #4
 8002214:	4613      	mov	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40022000 	.word	0x40022000

08002228 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002232:	2340      	movs	r3, #64	@ 0x40
 8002234:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <FLASH_Program_Fast+0x68>)
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4a13      	ldr	r2, [pc, #76]	@ (8002290 <FLASH_Program_Fast+0x68>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002248:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002250:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	3304      	adds	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]
    row_index--;
 800226c:	7ffb      	ldrb	r3, [r7, #31]
 800226e:	3b01      	subs	r3, #1
 8002270:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002272:	7ffb      	ldrb	r3, [r7, #31]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1ef      	bne.n	8002258 <FLASH_Program_Fast+0x30>
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f383 8810 	msr	PRIMASK, r3
}
 8002282:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002284:	bf00      	nop
 8002286:	3724      	adds	r7, #36	@ 0x24
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800229e:	4b48      	ldr	r3, [pc, #288]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_FLASHEx_Erase+0x16>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e085      	b.n	80023b6 <HAL_FLASHEx_Erase+0x122>
 80022aa:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80022b4:	f7ff ff3c 	bl	8002130 <FLASH_WaitForLastOperation>
 80022b8:	4603      	mov	r3, r0
 80022ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d175      	bne.n	80023ae <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022c2:	4b3f      	ldr	r3, [pc, #252]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80022c8:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80022d4:	4b3b      	ldr	r3, [pc, #236]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80022e0:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a37      	ldr	r2, [pc, #220]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 80022e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 80022ee:	2203      	movs	r2, #3
 80022f0:	771a      	strb	r2, [r3, #28]
 80022f2:	e016      	b.n	8002322 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80022f4:	4b32      	ldr	r3, [pc, #200]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	771a      	strb	r2, [r3, #28]
 80022fa:	e012      	b.n	8002322 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80022fc:	4b31      	ldr	r3, [pc, #196]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002304:	2b00      	cmp	r3, #0
 8002306:	d009      	beq.n	800231c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002308:	4b2e      	ldr	r3, [pc, #184]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a2d      	ldr	r2, [pc, #180]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 800230e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002312:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002314:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 8002316:	2202      	movs	r2, #2
 8002318:	771a      	strb	r2, [r3, #28]
 800231a:	e002      	b.n	8002322 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800231c:	4b28      	ldr	r3, [pc, #160]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 800231e:	2200      	movs	r2, #0
 8002320:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d111      	bne.n	800234e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f84a 	bl	80023c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002334:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002338:	f7ff fefa 	bl	8002130 <FLASH_WaitForLastOperation>
 800233c:	4603      	mov	r3, r0
 800233e:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8002340:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	4a1f      	ldr	r2, [pc, #124]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6153      	str	r3, [r2, #20]
 800234c:	e02d      	b.n	80023aa <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	e01d      	b.n	800239a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4619      	mov	r1, r3
 8002364:	68b8      	ldr	r0, [r7, #8]
 8002366:	f000 f84d 	bl	8002404 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800236a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800236e:	f7ff fedf 	bl	8002130 <FLASH_WaitForLastOperation>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <HAL_FLASHEx_Erase+0x130>)
 800237c:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8002380:	f023 0302 	bic.w	r3, r3, #2
 8002384:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	601a      	str	r2, [r3, #0]
          break;
 8002392:	e00a      	b.n	80023aa <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	3301      	adds	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d3d9      	bcc.n	800235e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80023aa:	f000 f84f 	bl	800244c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <HAL_FLASHEx_Erase+0x12c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]

  return status;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000001c 	.word	0x2000001c
 80023c4:	40022000 	.word	0x40022000

080023c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80023da:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <FLASH_MassErase+0x38>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	4a08      	ldr	r2, [pc, #32]	@ (8002400 <FLASH_MassErase+0x38>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <FLASH_MassErase+0x38>)
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <FLASH_MassErase+0x38>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f0:	6153      	str	r3, [r2, #20]
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40022000 	.word	0x40022000

08002404 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <FLASH_PageErase+0x44>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800241e:	490a      	ldr	r1, [pc, #40]	@ (8002448 <FLASH_PageErase+0x44>)
 8002420:	4313      	orrs	r3, r2
 8002422:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002424:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <FLASH_PageErase+0x44>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	4a07      	ldr	r2, [pc, #28]	@ (8002448 <FLASH_PageErase+0x44>)
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <FLASH_PageErase+0x44>)
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4a04      	ldr	r2, [pc, #16]	@ (8002448 <FLASH_PageErase+0x44>)
 8002436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800243a:	6153      	str	r3, [r2, #20]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40022000 	.word	0x40022000

0800244c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002452:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <FLASH_FlushCaches+0x8c>)
 8002454:	7f1b      	ldrb	r3, [r3, #28]
 8002456:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d002      	beq.n	8002464 <FLASH_FlushCaches+0x18>
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d117      	bne.n	8002494 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <FLASH_FlushCaches+0x90>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <FLASH_FlushCaches+0x90>)
 800246a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800246e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002470:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <FLASH_FlushCaches+0x90>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a19      	ldr	r2, [pc, #100]	@ (80024dc <FLASH_FlushCaches+0x90>)
 8002476:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <FLASH_FlushCaches+0x90>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a16      	ldr	r2, [pc, #88]	@ (80024dc <FLASH_FlushCaches+0x90>)
 8002482:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002486:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002488:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <FLASH_FlushCaches+0x90>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a13      	ldr	r2, [pc, #76]	@ (80024dc <FLASH_FlushCaches+0x90>)
 800248e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002492:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d002      	beq.n	80024a0 <FLASH_FlushCaches+0x54>
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d111      	bne.n	80024c4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <FLASH_FlushCaches+0x90>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <FLASH_FlushCaches+0x90>)
 80024a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <FLASH_FlushCaches+0x90>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <FLASH_FlushCaches+0x90>)
 80024b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <FLASH_FlushCaches+0x90>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <FLASH_FlushCaches+0x90>)
 80024be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80024c4:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <FLASH_FlushCaches+0x8c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	771a      	strb	r2, [r3, #28]
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	2000001c 	.word	0x2000001c
 80024dc:	40022000 	.word	0x40022000

080024e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	e148      	b.n	8002782 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 813a 	beq.w	800277c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b01      	cmp	r3, #1
 8002512:	d005      	beq.n	8002520 <HAL_GPIO_Init+0x40>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d130      	bne.n	8002582 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	2203      	movs	r2, #3
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	4013      	ands	r3, r2
 8002536:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002556:	2201      	movs	r2, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 0201 	and.w	r2, r3, #1
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b03      	cmp	r3, #3
 800258c:	d017      	beq.n	80025be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	2203      	movs	r2, #3
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d123      	bne.n	8002612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	6939      	ldr	r1, [r7, #16]
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8094 	beq.w	800277c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002654:	4b52      	ldr	r3, [pc, #328]	@ (80027a0 <HAL_GPIO_Init+0x2c0>)
 8002656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002658:	4a51      	ldr	r2, [pc, #324]	@ (80027a0 <HAL_GPIO_Init+0x2c0>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002660:	4b4f      	ldr	r3, [pc, #316]	@ (80027a0 <HAL_GPIO_Init+0x2c0>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800266c:	4a4d      	ldr	r2, [pc, #308]	@ (80027a4 <HAL_GPIO_Init+0x2c4>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_Init+0x1d4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a43      	ldr	r2, [pc, #268]	@ (80027a8 <HAL_GPIO_Init+0x2c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x1d0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a42      	ldr	r2, [pc, #264]	@ (80027ac <HAL_GPIO_Init+0x2cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_Init+0x1cc>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026ac:	2307      	movs	r3, #7
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026b4:	2300      	movs	r3, #0
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c6:	4937      	ldr	r1, [pc, #220]	@ (80027a4 <HAL_GPIO_Init+0x2c4>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026d4:	4b36      	ldr	r3, [pc, #216]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026f8:	4a2d      	ldr	r2, [pc, #180]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026fe:	4b2c      	ldr	r3, [pc, #176]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002722:	4a23      	ldr	r2, [pc, #140]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002728:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800274c:	4a18      	ldr	r2, [pc, #96]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002752:	4b17      	ldr	r3, [pc, #92]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002776:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	f47f aeaf 	bne.w	80024f0 <HAL_GPIO_Init+0x10>
  }
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	371c      	adds	r7, #28
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010000 	.word	0x40010000
 80027a8:	48000400 	.word	0x48000400
 80027ac:	48000800 	.word	0x48000800
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027cc:	2301      	movs	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e001      	b.n	80027d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
 80027f0:	4613      	mov	r3, r2
 80027f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f4:	787b      	ldrb	r3, [r7, #1]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	887a      	ldrh	r2, [r7, #2]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002800:	e002      	b.n	8002808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <HAL_PWREx_GetVoltageRange+0x18>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000

08002830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800283e:	d130      	bne.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002848:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800284c:	d038      	beq.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800284e:	4b20      	ldr	r3, [pc, #128]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002856:	4a1e      	ldr	r2, [pc, #120]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002858:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800285e:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2232      	movs	r2, #50	@ 0x32
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	4a1b      	ldr	r2, [pc, #108]	@ (80028d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0c9b      	lsrs	r3, r3, #18
 8002870:	3301      	adds	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002874:	e002      	b.n	800287c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3b01      	subs	r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002888:	d102      	bne.n	8002890 <HAL_PWREx_ControlVoltageScaling+0x60>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f2      	bne.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002890:	4b0f      	ldr	r3, [pc, #60]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800289c:	d110      	bne.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e00f      	b.n	80028c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028a2:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028ae:	d007      	beq.n	80028c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028b8:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40007000 	.word	0x40007000
 80028d4:	20000000 	.word	0x20000000
 80028d8:	431bde83 	.word	0x431bde83

080028dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 bc02 	b.w	80030f4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f0:	4b96      	ldr	r3, [pc, #600]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028fa:	4b94      	ldr	r3, [pc, #592]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80e4 	beq.w	8002ada <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_RCC_OscConfig+0x4c>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	f040 808b 	bne.w	8002a36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2b01      	cmp	r3, #1
 8002924:	f040 8087 	bne.w	8002a36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002928:	4b88      	ldr	r3, [pc, #544]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x64>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e3d9      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1a      	ldr	r2, [r3, #32]
 8002944:	4b81      	ldr	r3, [pc, #516]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d004      	beq.n	800295a <HAL_RCC_OscConfig+0x7e>
 8002950:	4b7e      	ldr	r3, [pc, #504]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002958:	e005      	b.n	8002966 <HAL_RCC_OscConfig+0x8a>
 800295a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 800295c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002966:	4293      	cmp	r3, r2
 8002968:	d223      	bcs.n	80029b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fd54 	bl	800341c <RCC_SetFlashLatencyFromMSIRange>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e3ba      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297e:	4b73      	ldr	r3, [pc, #460]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a72      	ldr	r2, [pc, #456]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b70      	ldr	r3, [pc, #448]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	496d      	ldr	r1, [pc, #436]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800299c:	4b6b      	ldr	r3, [pc, #428]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	4968      	ldr	r1, [pc, #416]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	604b      	str	r3, [r1, #4]
 80029b0:	e025      	b.n	80029fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b2:	4b66      	ldr	r3, [pc, #408]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a65      	ldr	r2, [pc, #404]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b63      	ldr	r3, [pc, #396]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	4960      	ldr	r1, [pc, #384]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d0:	4b5e      	ldr	r3, [pc, #376]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	495b      	ldr	r1, [pc, #364]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fd14 	bl	800341c <RCC_SetFlashLatencyFromMSIRange>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e37a      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029fe:	f000 fc81 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b51      	ldr	r3, [pc, #324]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	4950      	ldr	r1, [pc, #320]	@ (8002b50 <HAL_RCC_OscConfig+0x274>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b54 <HAL_RCC_OscConfig+0x278>)
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b58 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff f980 	bl	8001d28 <HAL_InitTick>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d052      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	e35e      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d032      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a3e:	4b43      	ldr	r3, [pc, #268]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a42      	ldr	r2, [pc, #264]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff f9bd 	bl	8001dc8 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a52:	f7ff f9b9 	bl	8001dc8 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e347      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a64:	4b39      	ldr	r3, [pc, #228]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a70:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a35      	ldr	r2, [pc, #212]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a76:	f043 0308 	orr.w	r3, r3, #8
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b33      	ldr	r3, [pc, #204]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4930      	ldr	r1, [pc, #192]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	492b      	ldr	r1, [pc, #172]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
 8002aa2:	e01a      	b.n	8002ada <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aa4:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a28      	ldr	r2, [pc, #160]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002aaa:	f023 0301 	bic.w	r3, r3, #1
 8002aae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f98a 	bl	8001dc8 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab8:	f7ff f986 	bl	8001dc8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e314      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aca:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x1dc>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d073      	beq.n	8002bce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x21c>
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d10e      	bne.n	8002b10 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d063      	beq.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15f      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e2f1      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x24c>
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e025      	b.n	8002b74 <HAL_RCC_OscConfig+0x298>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b30:	d114      	bne.n	8002b5c <HAL_RCC_OscConfig+0x280>
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a02      	ldr	r2, [pc, #8]	@ (8002b4c <HAL_RCC_OscConfig+0x270>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e013      	b.n	8002b74 <HAL_RCC_OscConfig+0x298>
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	080045c8 	.word	0x080045c8
 8002b54:	20000000 	.word	0x20000000
 8002b58:	20000014 	.word	0x20000014
 8002b5c:	4ba0      	ldr	r3, [pc, #640]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a9f      	ldr	r2, [pc, #636]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b9d      	ldr	r3, [pc, #628]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a9c      	ldr	r2, [pc, #624]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f924 	bl	8001dc8 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7ff f920 	bl	8001dc8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	@ 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e2ae      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b96:	4b92      	ldr	r3, [pc, #584]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2a8>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7ff f910 	bl	8001dc8 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7ff f90c 	bl	8001dc8 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e29a      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bbe:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x2d0>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d060      	beq.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_OscConfig+0x310>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d119      	bne.n	8002c1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d116      	bne.n	8002c1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bec:	4b7c      	ldr	r3, [pc, #496]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_OscConfig+0x328>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e277      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b76      	ldr	r3, [pc, #472]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	4973      	ldr	r1, [pc, #460]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c18:	e040      	b.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d023      	beq.n	8002c6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c22:	4b6f      	ldr	r3, [pc, #444]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a6e      	ldr	r2, [pc, #440]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7ff f8cb 	bl	8001dc8 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c36:	f7ff f8c7 	bl	8001dc8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e255      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c48:	4b65      	ldr	r3, [pc, #404]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c54:	4b62      	ldr	r3, [pc, #392]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	495f      	ldr	r1, [pc, #380]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	e018      	b.n	8002c9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7ff f8a7 	bl	8001dc8 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7e:	f7ff f8a3 	bl	8001dc8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e231      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c90:	4b53      	ldr	r3, [pc, #332]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f0      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03c      	beq.n	8002d22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01c      	beq.n	8002cea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cb6:	4a4a      	ldr	r2, [pc, #296]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7ff f882 	bl	8001dc8 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7ff f87e 	bl	8001dc8 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e20c      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cda:	4b41      	ldr	r3, [pc, #260]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ef      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x3ec>
 8002ce8:	e01b      	b.n	8002d22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cea:	4b3d      	ldr	r3, [pc, #244]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cf0:	4a3b      	ldr	r2, [pc, #236]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	f023 0301 	bic.w	r3, r3, #1
 8002cf6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f865 	bl	8001dc8 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7ff f861 	bl	8001dc8 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e1ef      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d14:	4b32      	ldr	r3, [pc, #200]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1ef      	bne.n	8002d02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80a6 	beq.w	8002e7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d34:	4b2a      	ldr	r3, [pc, #168]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10d      	bne.n	8002d5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d40:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	4a26      	ldr	r2, [pc, #152]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4c:	4b24      	ldr	r3, [pc, #144]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	60bb      	str	r3, [r7, #8]
 8002d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d5c:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <HAL_RCC_OscConfig+0x508>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d118      	bne.n	8002d9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d68:	4b1e      	ldr	r3, [pc, #120]	@ (8002de4 <HAL_RCC_OscConfig+0x508>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8002de4 <HAL_RCC_OscConfig+0x508>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d74:	f7ff f828 	bl	8001dc8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7c:	f7ff f824 	bl	8001dc8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1b2      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8e:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <HAL_RCC_OscConfig+0x508>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d108      	bne.n	8002db4 <HAL_RCC_OscConfig+0x4d8>
 8002da2:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db2:	e029      	b.n	8002e08 <HAL_RCC_OscConfig+0x52c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d115      	bne.n	8002de8 <HAL_RCC_OscConfig+0x50c>
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc2:	4a07      	ldr	r2, [pc, #28]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd2:	4a03      	ldr	r2, [pc, #12]	@ (8002de0 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ddc:	e014      	b.n	8002e08 <HAL_RCC_OscConfig+0x52c>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
 8002de8:	4b9a      	ldr	r3, [pc, #616]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dee:	4a99      	ldr	r2, [pc, #612]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002df8:	4b96      	ldr	r3, [pc, #600]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfe:	4a95      	ldr	r2, [pc, #596]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d016      	beq.n	8002e3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e10:	f7fe ffda 	bl	8001dc8 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e18:	f7fe ffd6 	bl	8001dc8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e162      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e2e:	4b89      	ldr	r3, [pc, #548]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d0ed      	beq.n	8002e18 <HAL_RCC_OscConfig+0x53c>
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe ffc3 	bl	8001dc8 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe ffbf 	bl	8001dc8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e14b      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e5c:	4b7d      	ldr	r3, [pc, #500]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ed      	bne.n	8002e46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b78      	ldr	r3, [pc, #480]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	4a77      	ldr	r2, [pc, #476]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d03c      	beq.n	8002f02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01c      	beq.n	8002eca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e90:	4b70      	ldr	r3, [pc, #448]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e96:	4a6f      	ldr	r2, [pc, #444]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe ff92 	bl	8001dc8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ea8:	f7fe ff8e 	bl	8001dc8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e11c      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eba:	4b66      	ldr	r3, [pc, #408]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ef      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x5cc>
 8002ec8:	e01b      	b.n	8002f02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eca:	4b62      	ldr	r3, [pc, #392]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ed0:	4a60      	ldr	r2, [pc, #384]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eda:	f7fe ff75 	bl	8001dc8 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ee2:	f7fe ff71 	bl	8001dc8 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0ff      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ef4:	4b57      	ldr	r3, [pc, #348]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002ef6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ef      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80f3 	beq.w	80030f2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f040 80c9 	bne.w	80030a8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f16:	4b4f      	ldr	r3, [pc, #316]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f003 0203 	and.w	r2, r3, #3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d12c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	3b01      	subs	r3, #1
 8002f36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d123      	bne.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d11b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d113      	bne.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d109      	bne.n	8002f84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	085b      	lsrs	r3, r3, #1
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d06b      	beq.n	800305c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d062      	beq.n	8003050 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f8a:	4b32      	ldr	r3, [pc, #200]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0ac      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002fa0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fa4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fa6:	f7fe ff0f 	bl	8001dc8 <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fae:	f7fe ff0b 	bl	8001dc8 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e099      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fc0:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f0      	bne.n	8002fae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fcc:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <HAL_RCC_OscConfig+0x77c>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002fdc:	3a01      	subs	r2, #1
 8002fde:	0112      	lsls	r2, r2, #4
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002fe6:	0212      	lsls	r2, r2, #8
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fee:	0852      	lsrs	r2, r2, #1
 8002ff0:	3a01      	subs	r2, #1
 8002ff2:	0552      	lsls	r2, r2, #21
 8002ff4:	4311      	orrs	r1, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ffa:	0852      	lsrs	r2, r2, #1
 8002ffc:	3a01      	subs	r2, #1
 8002ffe:	0652      	lsls	r2, r2, #25
 8003000:	4311      	orrs	r1, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003006:	06d2      	lsls	r2, r2, #27
 8003008:	430a      	orrs	r2, r1
 800300a:	4912      	ldr	r1, [pc, #72]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 800300c:	4313      	orrs	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003010:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0f      	ldr	r2, [pc, #60]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800301c:	4b0d      	ldr	r3, [pc, #52]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a0c      	ldr	r2, [pc, #48]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003026:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003028:	f7fe fece 	bl	8001dc8 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fe feca 	bl	8001dc8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e058      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003042:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <HAL_RCC_OscConfig+0x778>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800304e:	e050      	b.n	80030f2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e04f      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
 8003054:	40021000 	.word	0x40021000
 8003058:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305c:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d144      	bne.n	80030f2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003068:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a23      	ldr	r2, [pc, #140]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 800306e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003072:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003074:	4b21      	ldr	r3, [pc, #132]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4a20      	ldr	r2, [pc, #128]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 800307a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003080:	f7fe fea2 	bl	8001dc8 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003088:	f7fe fe9e 	bl	8001dc8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e02c      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309a:	4b18      	ldr	r3, [pc, #96]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x7ac>
 80030a6:	e024      	b.n	80030f2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d01f      	beq.n	80030ee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ae:	4b13      	ldr	r3, [pc, #76]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a12      	ldr	r2, [pc, #72]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 80030b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ba:	f7fe fe85 	bl	8001dc8 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fe81 	bl	8001dc8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e00f      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4905      	ldr	r1, [pc, #20]	@ (80030fc <HAL_RCC_OscConfig+0x820>)
 80030e6:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_RCC_OscConfig+0x824>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	60cb      	str	r3, [r1, #12]
 80030ec:	e001      	b.n	80030f2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	feeefffc 	.word	0xfeeefffc

08003104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0e7      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b75      	ldr	r3, [pc, #468]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d910      	bls.n	8003148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b72      	ldr	r3, [pc, #456]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4970      	ldr	r1, [pc, #448]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b6e      	ldr	r3, [pc, #440]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0cf      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4b66      	ldr	r3, [pc, #408]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003160:	429a      	cmp	r2, r3
 8003162:	d908      	bls.n	8003176 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003164:	4b63      	ldr	r3, [pc, #396]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4960      	ldr	r1, [pc, #384]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04c      	beq.n	800321c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d107      	bne.n	800319a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	4b5a      	ldr	r3, [pc, #360]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d121      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e0a6      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a2:	4b54      	ldr	r3, [pc, #336]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e09a      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ba:	4b4e      	ldr	r3, [pc, #312]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e08e      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ca:	4b4a      	ldr	r3, [pc, #296]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e086      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b46      	ldr	r3, [pc, #280]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4943      	ldr	r1, [pc, #268]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ec:	f7fe fdec 	bl	8001dc8 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fe fde8 	bl	8001dc8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e06e      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b3a      	ldr	r3, [pc, #232]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003234:	429a      	cmp	r2, r3
 8003236:	d208      	bcs.n	800324a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003238:	4b2e      	ldr	r3, [pc, #184]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	492b      	ldr	r1, [pc, #172]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003246:	4313      	orrs	r3, r2
 8003248:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800324a:	4b29      	ldr	r3, [pc, #164]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d210      	bcs.n	800327a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003258:	4b25      	ldr	r3, [pc, #148]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 0207 	bic.w	r2, r3, #7
 8003260:	4923      	ldr	r1, [pc, #140]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003268:	4b21      	ldr	r3, [pc, #132]	@ (80032f0 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e036      	b.n	80032e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	d008      	beq.n	8003298 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	4918      	ldr	r1, [pc, #96]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003294:	4313      	orrs	r3, r2
 8003296:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d009      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a4:	4b13      	ldr	r3, [pc, #76]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4910      	ldr	r1, [pc, #64]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032b8:	f000 f824 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	490b      	ldr	r1, [pc, #44]	@ (80032f8 <HAL_RCC_ClockConfig+0x1f4>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_RCC_ClockConfig+0x1f8>)
 80032d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032d8:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_RCC_ClockConfig+0x1fc>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fd23 	bl	8001d28 <HAL_InitTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80032e6:	7afb      	ldrb	r3, [r7, #11]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	080045c8 	.word	0x080045c8
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000014 	.word	0x20000014

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003312:	4b3e      	ldr	r3, [pc, #248]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
 800331a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800331c:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0303 	and.w	r3, r3, #3
 8003324:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d121      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d11e      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003338:	4b34      	ldr	r3, [pc, #208]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d107      	bne.n	8003354 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003344:	4b31      	ldr	r3, [pc, #196]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003346:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e005      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003354:	4b2d      	ldr	r3, [pc, #180]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003360:	4a2b      	ldr	r2, [pc, #172]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003374:	e00a      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b04      	cmp	r3, #4
 800337a:	d102      	bne.n	8003382 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800337c:	4b25      	ldr	r3, [pc, #148]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x110>)
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e004      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d101      	bne.n	800338c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003388:	4b23      	ldr	r3, [pc, #140]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x114>)
 800338a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d134      	bne.n	80033fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003392:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d003      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0xa6>
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d003      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0xac>
 80033a8:	e005      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x110>)
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	e005      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033b0:	4b19      	ldr	r3, [pc, #100]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x114>)
 80033b2:	617b      	str	r3, [r7, #20]
      break;
 80033b4:	e002      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	617b      	str	r3, [r7, #20]
      break;
 80033ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033bc:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	3301      	adds	r3, #1
 80033c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	fb03 f202 	mul.w	r2, r3, r2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	0e5b      	lsrs	r3, r3, #25
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	3301      	adds	r3, #1
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033fc:	69bb      	ldr	r3, [r7, #24]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3724      	adds	r7, #36	@ 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	080045d8 	.word	0x080045d8
 8003414:	00f42400 	.word	0x00f42400
 8003418:	007a1200 	.word	0x007a1200

0800341c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003428:	4b2a      	ldr	r3, [pc, #168]	@ (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003434:	f7ff f9ee 	bl	8002814 <HAL_PWREx_GetVoltageRange>
 8003438:	6178      	str	r0, [r7, #20]
 800343a:	e014      	b.n	8003466 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b25      	ldr	r3, [pc, #148]	@ (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	4a24      	ldr	r2, [pc, #144]	@ (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6593      	str	r3, [r2, #88]	@ 0x58
 8003448:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003454:	f7ff f9de 	bl	8002814 <HAL_PWREx_GetVoltageRange>
 8003458:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800345a:	4b1e      	ldr	r3, [pc, #120]	@ (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345e:	4a1d      	ldr	r2, [pc, #116]	@ (80034d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003464:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800346c:	d10b      	bne.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b80      	cmp	r3, #128	@ 0x80
 8003472:	d919      	bls.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2ba0      	cmp	r3, #160	@ 0xa0
 8003478:	d902      	bls.n	8003480 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800347a:	2302      	movs	r3, #2
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	e013      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e010      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b80      	cmp	r3, #128	@ 0x80
 800348a:	d902      	bls.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800348c:	2303      	movs	r3, #3
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e00a      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b80      	cmp	r3, #128	@ 0x80
 8003496:	d102      	bne.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003498:	2302      	movs	r3, #2
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e004      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b70      	cmp	r3, #112	@ 0x70
 80034a2:	d101      	bne.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a4:	2301      	movs	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034a8:	4b0b      	ldr	r3, [pc, #44]	@ (80034d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 0207 	bic.w	r2, r3, #7
 80034b0:	4909      	ldr	r1, [pc, #36]	@ (80034d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034b8:	4b07      	ldr	r3, [pc, #28]	@ (80034d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0307 	and.w	r3, r3, #7
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d001      	beq.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40022000 	.word	0x40022000

080034dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e095      	b.n	800361a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034fe:	d009      	beq.n	8003514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
 8003506:	e005      	b.n	8003514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd ffa8 	bl	8001484 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800354a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003554:	d902      	bls.n	800355c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	e002      	b.n	8003562 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800355c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003560:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800356a:	d007      	beq.n	800357c <HAL_SPI_Init+0xa0>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003574:	d002      	beq.n	800357c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	ea42 0103 	orr.w	r1, r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	f003 0204 	and.w	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035f8:	ea42 0103 	orr.w	r1, r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b088      	sub	sp, #32
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003632:	f7fe fbc9 	bl	8001dc8 <HAL_GetTick>
 8003636:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003648:	2302      	movs	r3, #2
 800364a:	e15c      	b.n	8003906 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_SPI_Transmit+0x36>
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e154      	b.n	8003906 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_SPI_Transmit+0x48>
 8003666:	2302      	movs	r3, #2
 8003668:	e14d      	b.n	8003906 <HAL_SPI_Transmit+0x2e4>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	88fa      	ldrh	r2, [r7, #6]
 8003690:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036bc:	d10f      	bne.n	80036de <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d007      	beq.n	80036fc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003704:	d952      	bls.n	80037ac <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_SPI_Transmit+0xf2>
 800370e:	8b7b      	ldrh	r3, [r7, #26]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d145      	bne.n	80037a0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	1c9a      	adds	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003738:	e032      	b.n	80037a0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d112      	bne.n	800376e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003758:	1c9a      	adds	r2, r3, #2
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800376c:	e018      	b.n	80037a0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800376e:	f7fe fb2b 	bl	8001dc8 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d803      	bhi.n	8003786 <HAL_SPI_Transmit+0x164>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d102      	bne.n	800378c <HAL_SPI_Transmit+0x16a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0b2      	b.n	8003906 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1c7      	bne.n	800373a <HAL_SPI_Transmit+0x118>
 80037aa:	e083      	b.n	80038b4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_SPI_Transmit+0x198>
 80037b4:	8b7b      	ldrh	r3, [r7, #26]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d177      	bne.n	80038aa <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d912      	bls.n	80037ea <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d4:	1c9a      	adds	r2, r3, #2
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b02      	subs	r3, #2
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037e8:	e05f      	b.n	80038aa <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	330c      	adds	r3, #12
 80037f4:	7812      	ldrb	r2, [r2, #0]
 80037f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003810:	e04b      	b.n	80038aa <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d12b      	bne.n	8003878 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d912      	bls.n	8003850 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	881a      	ldrh	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	1c9a      	adds	r2, r3, #2
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b02      	subs	r3, #2
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800384e:	e02c      	b.n	80038aa <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003862:	1c5a      	adds	r2, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003876:	e018      	b.n	80038aa <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003878:	f7fe faa6 	bl	8001dc8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d803      	bhi.n	8003890 <HAL_SPI_Transmit+0x26e>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Transmit+0x274>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e02d      	b.n	8003906 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ae      	bne.n	8003812 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	6839      	ldr	r1, [r7, #0]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f947 	bl	8003b4c <SPI_EndRxTxTransaction>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003904:	2300      	movs	r3, #0
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
	...

08003910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b088      	sub	sp, #32
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003920:	f7fe fa52 	bl	8001dc8 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4413      	add	r3, r2
 800392e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003930:	f7fe fa4a 	bl	8001dc8 <HAL_GetTick>
 8003934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003936:	4b39      	ldr	r3, [pc, #228]	@ (8003a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	015b      	lsls	r3, r3, #5
 800393c:	0d1b      	lsrs	r3, r3, #20
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003946:	e054      	b.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d050      	beq.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003950:	f7fe fa3a 	bl	8001dc8 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	429a      	cmp	r2, r3
 800395e:	d902      	bls.n	8003966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d13d      	bne.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800397e:	d111      	bne.n	80039a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003988:	d004      	beq.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003992:	d107      	bne.n	80039a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ac:	d10f      	bne.n	80039ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e017      	b.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d19b      	bne.n	8003948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	@ 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a32:	f7fe f9c9 	bl	8001dc8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003a42:	f7fe f9c1 	bl	8001dc8 <HAL_GetTick>
 8003a46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a50:	4b3d      	ldr	r3, [pc, #244]	@ (8003b48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00da      	lsls	r2, r3, #3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	0d1b      	lsrs	r3, r3, #20
 8003a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a68:	e060      	b.n	8003b2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003a70:	d107      	bne.n	8003a82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d104      	bne.n	8003a82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d050      	beq.n	8003b2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a8a:	f7fe f99d 	bl	8001dc8 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d902      	bls.n	8003aa0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d13d      	bne.n	8003b1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003aae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ab8:	d111      	bne.n	8003ade <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ac2:	d004      	beq.n	8003ace <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003acc:	d107      	bne.n	8003ade <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003adc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae6:	d10f      	bne.n	8003b08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e010      	b.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4013      	ands	r3, r2
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d196      	bne.n	8003a6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	@ 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000000 	.word	0x20000000

08003b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f7ff ff5b 	bl	8003a20 <SPI_WaitFifoStateUntilTimeout>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e027      	b.n	8003bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff fec0 	bl	8003910 <SPI_WaitFlagStateUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	f043 0220 	orr.w	r2, r3, #32
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e014      	b.n	8003bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff ff34 	bl	8003a20 <SPI_WaitFifoStateUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e000      	b.n	8003bd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <siprintf>:
 8003bd8:	b40e      	push	{r1, r2, r3}
 8003bda:	b500      	push	{lr}
 8003bdc:	b09c      	sub	sp, #112	@ 0x70
 8003bde:	ab1d      	add	r3, sp, #116	@ 0x74
 8003be0:	9002      	str	r0, [sp, #8]
 8003be2:	9006      	str	r0, [sp, #24]
 8003be4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003be8:	4809      	ldr	r0, [pc, #36]	@ (8003c10 <siprintf+0x38>)
 8003bea:	9107      	str	r1, [sp, #28]
 8003bec:	9104      	str	r1, [sp, #16]
 8003bee:	4909      	ldr	r1, [pc, #36]	@ (8003c14 <siprintf+0x3c>)
 8003bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bf4:	9105      	str	r1, [sp, #20]
 8003bf6:	6800      	ldr	r0, [r0, #0]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	a902      	add	r1, sp, #8
 8003bfc:	f000 f9a2 	bl	8003f44 <_svfiprintf_r>
 8003c00:	9b02      	ldr	r3, [sp, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	b01c      	add	sp, #112	@ 0x70
 8003c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c0c:	b003      	add	sp, #12
 8003c0e:	4770      	bx	lr
 8003c10:	2000003c 	.word	0x2000003c
 8003c14:	ffff0208 	.word	0xffff0208

08003c18 <memset>:
 8003c18:	4402      	add	r2, r0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	f803 1b01 	strb.w	r1, [r3], #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <__errno>:
 8003c28:	4b01      	ldr	r3, [pc, #4]	@ (8003c30 <__errno+0x8>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	2000003c 	.word	0x2000003c

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	@ (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	@ (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	@ (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	@ (8003c78 <__libc_init_array+0x44>)
 8003c48:	f000 fc66 	bl	8004518 <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08005ed0 	.word	0x08005ed0
 8003c70:	08005ed0 	.word	0x08005ed0
 8003c74:	08005ed0 	.word	0x08005ed0
 8003c78:	08005ed4 	.word	0x08005ed4

08003c7c <__retarget_lock_acquire_recursive>:
 8003c7c:	4770      	bx	lr

08003c7e <__retarget_lock_release_recursive>:
 8003c7e:	4770      	bx	lr

08003c80 <memcpy>:
 8003c80:	440a      	add	r2, r1
 8003c82:	4291      	cmp	r1, r2
 8003c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c88:	d100      	bne.n	8003c8c <memcpy+0xc>
 8003c8a:	4770      	bx	lr
 8003c8c:	b510      	push	{r4, lr}
 8003c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c96:	4291      	cmp	r1, r2
 8003c98:	d1f9      	bne.n	8003c8e <memcpy+0xe>
 8003c9a:	bd10      	pop	{r4, pc}

08003c9c <_free_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2900      	cmp	r1, #0
 8003ca2:	d041      	beq.n	8003d28 <_free_r+0x8c>
 8003ca4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca8:	1f0c      	subs	r4, r1, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bfb8      	it	lt
 8003cae:	18e4      	addlt	r4, r4, r3
 8003cb0:	f000 f8e0 	bl	8003e74 <__malloc_lock>
 8003cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <_free_r+0x90>)
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	b933      	cbnz	r3, 8003cc8 <_free_r+0x2c>
 8003cba:	6063      	str	r3, [r4, #4]
 8003cbc:	6014      	str	r4, [r2, #0]
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc4:	f000 b8dc 	b.w	8003e80 <__malloc_unlock>
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	d908      	bls.n	8003cde <_free_r+0x42>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	1821      	adds	r1, r4, r0
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf01      	itttt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	1809      	addeq	r1, r1, r0
 8003cda:	6021      	streq	r1, [r4, #0]
 8003cdc:	e7ed      	b.n	8003cba <_free_r+0x1e>
 8003cde:	461a      	mov	r2, r3
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b10b      	cbz	r3, 8003ce8 <_free_r+0x4c>
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	d9fa      	bls.n	8003cde <_free_r+0x42>
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	1850      	adds	r0, r2, r1
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d10b      	bne.n	8003d08 <_free_r+0x6c>
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	4401      	add	r1, r0
 8003cf4:	1850      	adds	r0, r2, r1
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	6011      	str	r1, [r2, #0]
 8003cfa:	d1e0      	bne.n	8003cbe <_free_r+0x22>
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	6053      	str	r3, [r2, #4]
 8003d02:	4408      	add	r0, r1
 8003d04:	6010      	str	r0, [r2, #0]
 8003d06:	e7da      	b.n	8003cbe <_free_r+0x22>
 8003d08:	d902      	bls.n	8003d10 <_free_r+0x74>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	e7d6      	b.n	8003cbe <_free_r+0x22>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	1821      	adds	r1, r4, r0
 8003d14:	428b      	cmp	r3, r1
 8003d16:	bf04      	itt	eq
 8003d18:	6819      	ldreq	r1, [r3, #0]
 8003d1a:	685b      	ldreq	r3, [r3, #4]
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	bf04      	itt	eq
 8003d20:	1809      	addeq	r1, r1, r0
 8003d22:	6021      	streq	r1, [r4, #0]
 8003d24:	6054      	str	r4, [r2, #4]
 8003d26:	e7ca      	b.n	8003cbe <_free_r+0x22>
 8003d28:	bd38      	pop	{r3, r4, r5, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200006d0 	.word	0x200006d0

08003d30 <sbrk_aligned>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4e0f      	ldr	r6, [pc, #60]	@ (8003d70 <sbrk_aligned+0x40>)
 8003d34:	460c      	mov	r4, r1
 8003d36:	6831      	ldr	r1, [r6, #0]
 8003d38:	4605      	mov	r5, r0
 8003d3a:	b911      	cbnz	r1, 8003d42 <sbrk_aligned+0x12>
 8003d3c:	f000 fba6 	bl	800448c <_sbrk_r>
 8003d40:	6030      	str	r0, [r6, #0]
 8003d42:	4621      	mov	r1, r4
 8003d44:	4628      	mov	r0, r5
 8003d46:	f000 fba1 	bl	800448c <_sbrk_r>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d103      	bne.n	8003d56 <sbrk_aligned+0x26>
 8003d4e:	f04f 34ff 	mov.w	r4, #4294967295
 8003d52:	4620      	mov	r0, r4
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	1cc4      	adds	r4, r0, #3
 8003d58:	f024 0403 	bic.w	r4, r4, #3
 8003d5c:	42a0      	cmp	r0, r4
 8003d5e:	d0f8      	beq.n	8003d52 <sbrk_aligned+0x22>
 8003d60:	1a21      	subs	r1, r4, r0
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 fb92 	bl	800448c <_sbrk_r>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d1f2      	bne.n	8003d52 <sbrk_aligned+0x22>
 8003d6c:	e7ef      	b.n	8003d4e <sbrk_aligned+0x1e>
 8003d6e:	bf00      	nop
 8003d70:	200006cc 	.word	0x200006cc

08003d74 <_malloc_r>:
 8003d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d78:	1ccd      	adds	r5, r1, #3
 8003d7a:	f025 0503 	bic.w	r5, r5, #3
 8003d7e:	3508      	adds	r5, #8
 8003d80:	2d0c      	cmp	r5, #12
 8003d82:	bf38      	it	cc
 8003d84:	250c      	movcc	r5, #12
 8003d86:	2d00      	cmp	r5, #0
 8003d88:	4606      	mov	r6, r0
 8003d8a:	db01      	blt.n	8003d90 <_malloc_r+0x1c>
 8003d8c:	42a9      	cmp	r1, r5
 8003d8e:	d904      	bls.n	8003d9a <_malloc_r+0x26>
 8003d90:	230c      	movs	r3, #12
 8003d92:	6033      	str	r3, [r6, #0]
 8003d94:	2000      	movs	r0, #0
 8003d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e70 <_malloc_r+0xfc>
 8003d9e:	f000 f869 	bl	8003e74 <__malloc_lock>
 8003da2:	f8d8 3000 	ldr.w	r3, [r8]
 8003da6:	461c      	mov	r4, r3
 8003da8:	bb44      	cbnz	r4, 8003dfc <_malloc_r+0x88>
 8003daa:	4629      	mov	r1, r5
 8003dac:	4630      	mov	r0, r6
 8003dae:	f7ff ffbf 	bl	8003d30 <sbrk_aligned>
 8003db2:	1c43      	adds	r3, r0, #1
 8003db4:	4604      	mov	r4, r0
 8003db6:	d158      	bne.n	8003e6a <_malloc_r+0xf6>
 8003db8:	f8d8 4000 	ldr.w	r4, [r8]
 8003dbc:	4627      	mov	r7, r4
 8003dbe:	2f00      	cmp	r7, #0
 8003dc0:	d143      	bne.n	8003e4a <_malloc_r+0xd6>
 8003dc2:	2c00      	cmp	r4, #0
 8003dc4:	d04b      	beq.n	8003e5e <_malloc_r+0xea>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	4639      	mov	r1, r7
 8003dca:	4630      	mov	r0, r6
 8003dcc:	eb04 0903 	add.w	r9, r4, r3
 8003dd0:	f000 fb5c 	bl	800448c <_sbrk_r>
 8003dd4:	4581      	cmp	r9, r0
 8003dd6:	d142      	bne.n	8003e5e <_malloc_r+0xea>
 8003dd8:	6821      	ldr	r1, [r4, #0]
 8003dda:	1a6d      	subs	r5, r5, r1
 8003ddc:	4629      	mov	r1, r5
 8003dde:	4630      	mov	r0, r6
 8003de0:	f7ff ffa6 	bl	8003d30 <sbrk_aligned>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d03a      	beq.n	8003e5e <_malloc_r+0xea>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	442b      	add	r3, r5
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	f8d8 3000 	ldr.w	r3, [r8]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	bb62      	cbnz	r2, 8003e50 <_malloc_r+0xdc>
 8003df6:	f8c8 7000 	str.w	r7, [r8]
 8003dfa:	e00f      	b.n	8003e1c <_malloc_r+0xa8>
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	1b52      	subs	r2, r2, r5
 8003e00:	d420      	bmi.n	8003e44 <_malloc_r+0xd0>
 8003e02:	2a0b      	cmp	r2, #11
 8003e04:	d917      	bls.n	8003e36 <_malloc_r+0xc2>
 8003e06:	1961      	adds	r1, r4, r5
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	6025      	str	r5, [r4, #0]
 8003e0c:	bf18      	it	ne
 8003e0e:	6059      	strne	r1, [r3, #4]
 8003e10:	6863      	ldr	r3, [r4, #4]
 8003e12:	bf08      	it	eq
 8003e14:	f8c8 1000 	streq.w	r1, [r8]
 8003e18:	5162      	str	r2, [r4, r5]
 8003e1a:	604b      	str	r3, [r1, #4]
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f000 f82f 	bl	8003e80 <__malloc_unlock>
 8003e22:	f104 000b 	add.w	r0, r4, #11
 8003e26:	1d23      	adds	r3, r4, #4
 8003e28:	f020 0007 	bic.w	r0, r0, #7
 8003e2c:	1ac2      	subs	r2, r0, r3
 8003e2e:	bf1c      	itt	ne
 8003e30:	1a1b      	subne	r3, r3, r0
 8003e32:	50a3      	strne	r3, [r4, r2]
 8003e34:	e7af      	b.n	8003d96 <_malloc_r+0x22>
 8003e36:	6862      	ldr	r2, [r4, #4]
 8003e38:	42a3      	cmp	r3, r4
 8003e3a:	bf0c      	ite	eq
 8003e3c:	f8c8 2000 	streq.w	r2, [r8]
 8003e40:	605a      	strne	r2, [r3, #4]
 8003e42:	e7eb      	b.n	8003e1c <_malloc_r+0xa8>
 8003e44:	4623      	mov	r3, r4
 8003e46:	6864      	ldr	r4, [r4, #4]
 8003e48:	e7ae      	b.n	8003da8 <_malloc_r+0x34>
 8003e4a:	463c      	mov	r4, r7
 8003e4c:	687f      	ldr	r7, [r7, #4]
 8003e4e:	e7b6      	b.n	8003dbe <_malloc_r+0x4a>
 8003e50:	461a      	mov	r2, r3
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	42a3      	cmp	r3, r4
 8003e56:	d1fb      	bne.n	8003e50 <_malloc_r+0xdc>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6053      	str	r3, [r2, #4]
 8003e5c:	e7de      	b.n	8003e1c <_malloc_r+0xa8>
 8003e5e:	230c      	movs	r3, #12
 8003e60:	6033      	str	r3, [r6, #0]
 8003e62:	4630      	mov	r0, r6
 8003e64:	f000 f80c 	bl	8003e80 <__malloc_unlock>
 8003e68:	e794      	b.n	8003d94 <_malloc_r+0x20>
 8003e6a:	6005      	str	r5, [r0, #0]
 8003e6c:	e7d6      	b.n	8003e1c <_malloc_r+0xa8>
 8003e6e:	bf00      	nop
 8003e70:	200006d0 	.word	0x200006d0

08003e74 <__malloc_lock>:
 8003e74:	4801      	ldr	r0, [pc, #4]	@ (8003e7c <__malloc_lock+0x8>)
 8003e76:	f7ff bf01 	b.w	8003c7c <__retarget_lock_acquire_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	200006c8 	.word	0x200006c8

08003e80 <__malloc_unlock>:
 8003e80:	4801      	ldr	r0, [pc, #4]	@ (8003e88 <__malloc_unlock+0x8>)
 8003e82:	f7ff befc 	b.w	8003c7e <__retarget_lock_release_recursive>
 8003e86:	bf00      	nop
 8003e88:	200006c8 	.word	0x200006c8

08003e8c <__ssputs_r>:
 8003e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	688e      	ldr	r6, [r1, #8]
 8003e92:	461f      	mov	r7, r3
 8003e94:	42be      	cmp	r6, r7
 8003e96:	680b      	ldr	r3, [r1, #0]
 8003e98:	4682      	mov	sl, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	4690      	mov	r8, r2
 8003e9e:	d82d      	bhi.n	8003efc <__ssputs_r+0x70>
 8003ea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ea8:	d026      	beq.n	8003ef8 <__ssputs_r+0x6c>
 8003eaa:	6965      	ldr	r5, [r4, #20]
 8003eac:	6909      	ldr	r1, [r1, #16]
 8003eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eb2:	eba3 0901 	sub.w	r9, r3, r1
 8003eb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eba:	1c7b      	adds	r3, r7, #1
 8003ebc:	444b      	add	r3, r9
 8003ebe:	106d      	asrs	r5, r5, #1
 8003ec0:	429d      	cmp	r5, r3
 8003ec2:	bf38      	it	cc
 8003ec4:	461d      	movcc	r5, r3
 8003ec6:	0553      	lsls	r3, r2, #21
 8003ec8:	d527      	bpl.n	8003f1a <__ssputs_r+0x8e>
 8003eca:	4629      	mov	r1, r5
 8003ecc:	f7ff ff52 	bl	8003d74 <_malloc_r>
 8003ed0:	4606      	mov	r6, r0
 8003ed2:	b360      	cbz	r0, 8003f2e <__ssputs_r+0xa2>
 8003ed4:	6921      	ldr	r1, [r4, #16]
 8003ed6:	464a      	mov	r2, r9
 8003ed8:	f7ff fed2 	bl	8003c80 <memcpy>
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	6126      	str	r6, [r4, #16]
 8003eea:	6165      	str	r5, [r4, #20]
 8003eec:	444e      	add	r6, r9
 8003eee:	eba5 0509 	sub.w	r5, r5, r9
 8003ef2:	6026      	str	r6, [r4, #0]
 8003ef4:	60a5      	str	r5, [r4, #8]
 8003ef6:	463e      	mov	r6, r7
 8003ef8:	42be      	cmp	r6, r7
 8003efa:	d900      	bls.n	8003efe <__ssputs_r+0x72>
 8003efc:	463e      	mov	r6, r7
 8003efe:	6820      	ldr	r0, [r4, #0]
 8003f00:	4632      	mov	r2, r6
 8003f02:	4641      	mov	r1, r8
 8003f04:	f000 faa8 	bl	8004458 <memmove>
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	1b9b      	subs	r3, r3, r6
 8003f0c:	60a3      	str	r3, [r4, #8]
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	4433      	add	r3, r6
 8003f12:	6023      	str	r3, [r4, #0]
 8003f14:	2000      	movs	r0, #0
 8003f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1a:	462a      	mov	r2, r5
 8003f1c:	f000 fac6 	bl	80044ac <_realloc_r>
 8003f20:	4606      	mov	r6, r0
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d1e0      	bne.n	8003ee8 <__ssputs_r+0x5c>
 8003f26:	6921      	ldr	r1, [r4, #16]
 8003f28:	4650      	mov	r0, sl
 8003f2a:	f7ff feb7 	bl	8003c9c <_free_r>
 8003f2e:	230c      	movs	r3, #12
 8003f30:	f8ca 3000 	str.w	r3, [sl]
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	e7e9      	b.n	8003f16 <__ssputs_r+0x8a>
	...

08003f44 <_svfiprintf_r>:
 8003f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f48:	4698      	mov	r8, r3
 8003f4a:	898b      	ldrh	r3, [r1, #12]
 8003f4c:	061b      	lsls	r3, r3, #24
 8003f4e:	b09d      	sub	sp, #116	@ 0x74
 8003f50:	4607      	mov	r7, r0
 8003f52:	460d      	mov	r5, r1
 8003f54:	4614      	mov	r4, r2
 8003f56:	d510      	bpl.n	8003f7a <_svfiprintf_r+0x36>
 8003f58:	690b      	ldr	r3, [r1, #16]
 8003f5a:	b973      	cbnz	r3, 8003f7a <_svfiprintf_r+0x36>
 8003f5c:	2140      	movs	r1, #64	@ 0x40
 8003f5e:	f7ff ff09 	bl	8003d74 <_malloc_r>
 8003f62:	6028      	str	r0, [r5, #0]
 8003f64:	6128      	str	r0, [r5, #16]
 8003f66:	b930      	cbnz	r0, 8003f76 <_svfiprintf_r+0x32>
 8003f68:	230c      	movs	r3, #12
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f70:	b01d      	add	sp, #116	@ 0x74
 8003f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f76:	2340      	movs	r3, #64	@ 0x40
 8003f78:	616b      	str	r3, [r5, #20]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f7e:	2320      	movs	r3, #32
 8003f80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f88:	2330      	movs	r3, #48	@ 0x30
 8003f8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004128 <_svfiprintf_r+0x1e4>
 8003f8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f92:	f04f 0901 	mov.w	r9, #1
 8003f96:	4623      	mov	r3, r4
 8003f98:	469a      	mov	sl, r3
 8003f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f9e:	b10a      	cbz	r2, 8003fa4 <_svfiprintf_r+0x60>
 8003fa0:	2a25      	cmp	r2, #37	@ 0x25
 8003fa2:	d1f9      	bne.n	8003f98 <_svfiprintf_r+0x54>
 8003fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa8:	d00b      	beq.n	8003fc2 <_svfiprintf_r+0x7e>
 8003faa:	465b      	mov	r3, fp
 8003fac:	4622      	mov	r2, r4
 8003fae:	4629      	mov	r1, r5
 8003fb0:	4638      	mov	r0, r7
 8003fb2:	f7ff ff6b 	bl	8003e8c <__ssputs_r>
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	f000 80a7 	beq.w	800410a <_svfiprintf_r+0x1c6>
 8003fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fbe:	445a      	add	r2, fp
 8003fc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 809f 	beq.w	800410a <_svfiprintf_r+0x1c6>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fd6:	f10a 0a01 	add.w	sl, sl, #1
 8003fda:	9304      	str	r3, [sp, #16]
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fe2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fe4:	4654      	mov	r4, sl
 8003fe6:	2205      	movs	r2, #5
 8003fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fec:	484e      	ldr	r0, [pc, #312]	@ (8004128 <_svfiprintf_r+0x1e4>)
 8003fee:	f7fc f8ef 	bl	80001d0 <memchr>
 8003ff2:	9a04      	ldr	r2, [sp, #16]
 8003ff4:	b9d8      	cbnz	r0, 800402e <_svfiprintf_r+0xea>
 8003ff6:	06d0      	lsls	r0, r2, #27
 8003ff8:	bf44      	itt	mi
 8003ffa:	2320      	movmi	r3, #32
 8003ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004000:	0711      	lsls	r1, r2, #28
 8004002:	bf44      	itt	mi
 8004004:	232b      	movmi	r3, #43	@ 0x2b
 8004006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800400a:	f89a 3000 	ldrb.w	r3, [sl]
 800400e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004010:	d015      	beq.n	800403e <_svfiprintf_r+0xfa>
 8004012:	9a07      	ldr	r2, [sp, #28]
 8004014:	4654      	mov	r4, sl
 8004016:	2000      	movs	r0, #0
 8004018:	f04f 0c0a 	mov.w	ip, #10
 800401c:	4621      	mov	r1, r4
 800401e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004022:	3b30      	subs	r3, #48	@ 0x30
 8004024:	2b09      	cmp	r3, #9
 8004026:	d94b      	bls.n	80040c0 <_svfiprintf_r+0x17c>
 8004028:	b1b0      	cbz	r0, 8004058 <_svfiprintf_r+0x114>
 800402a:	9207      	str	r2, [sp, #28]
 800402c:	e014      	b.n	8004058 <_svfiprintf_r+0x114>
 800402e:	eba0 0308 	sub.w	r3, r0, r8
 8004032:	fa09 f303 	lsl.w	r3, r9, r3
 8004036:	4313      	orrs	r3, r2
 8004038:	9304      	str	r3, [sp, #16]
 800403a:	46a2      	mov	sl, r4
 800403c:	e7d2      	b.n	8003fe4 <_svfiprintf_r+0xa0>
 800403e:	9b03      	ldr	r3, [sp, #12]
 8004040:	1d19      	adds	r1, r3, #4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	9103      	str	r1, [sp, #12]
 8004046:	2b00      	cmp	r3, #0
 8004048:	bfbb      	ittet	lt
 800404a:	425b      	neglt	r3, r3
 800404c:	f042 0202 	orrlt.w	r2, r2, #2
 8004050:	9307      	strge	r3, [sp, #28]
 8004052:	9307      	strlt	r3, [sp, #28]
 8004054:	bfb8      	it	lt
 8004056:	9204      	strlt	r2, [sp, #16]
 8004058:	7823      	ldrb	r3, [r4, #0]
 800405a:	2b2e      	cmp	r3, #46	@ 0x2e
 800405c:	d10a      	bne.n	8004074 <_svfiprintf_r+0x130>
 800405e:	7863      	ldrb	r3, [r4, #1]
 8004060:	2b2a      	cmp	r3, #42	@ 0x2a
 8004062:	d132      	bne.n	80040ca <_svfiprintf_r+0x186>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	9203      	str	r2, [sp, #12]
 800406c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004070:	3402      	adds	r4, #2
 8004072:	9305      	str	r3, [sp, #20]
 8004074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004138 <_svfiprintf_r+0x1f4>
 8004078:	7821      	ldrb	r1, [r4, #0]
 800407a:	2203      	movs	r2, #3
 800407c:	4650      	mov	r0, sl
 800407e:	f7fc f8a7 	bl	80001d0 <memchr>
 8004082:	b138      	cbz	r0, 8004094 <_svfiprintf_r+0x150>
 8004084:	9b04      	ldr	r3, [sp, #16]
 8004086:	eba0 000a 	sub.w	r0, r0, sl
 800408a:	2240      	movs	r2, #64	@ 0x40
 800408c:	4082      	lsls	r2, r0
 800408e:	4313      	orrs	r3, r2
 8004090:	3401      	adds	r4, #1
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004098:	4824      	ldr	r0, [pc, #144]	@ (800412c <_svfiprintf_r+0x1e8>)
 800409a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800409e:	2206      	movs	r2, #6
 80040a0:	f7fc f896 	bl	80001d0 <memchr>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d036      	beq.n	8004116 <_svfiprintf_r+0x1d2>
 80040a8:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <_svfiprintf_r+0x1ec>)
 80040aa:	bb1b      	cbnz	r3, 80040f4 <_svfiprintf_r+0x1b0>
 80040ac:	9b03      	ldr	r3, [sp, #12]
 80040ae:	3307      	adds	r3, #7
 80040b0:	f023 0307 	bic.w	r3, r3, #7
 80040b4:	3308      	adds	r3, #8
 80040b6:	9303      	str	r3, [sp, #12]
 80040b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ba:	4433      	add	r3, r6
 80040bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80040be:	e76a      	b.n	8003f96 <_svfiprintf_r+0x52>
 80040c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80040c4:	460c      	mov	r4, r1
 80040c6:	2001      	movs	r0, #1
 80040c8:	e7a8      	b.n	800401c <_svfiprintf_r+0xd8>
 80040ca:	2300      	movs	r3, #0
 80040cc:	3401      	adds	r4, #1
 80040ce:	9305      	str	r3, [sp, #20]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f04f 0c0a 	mov.w	ip, #10
 80040d6:	4620      	mov	r0, r4
 80040d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040dc:	3a30      	subs	r2, #48	@ 0x30
 80040de:	2a09      	cmp	r2, #9
 80040e0:	d903      	bls.n	80040ea <_svfiprintf_r+0x1a6>
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d0c6      	beq.n	8004074 <_svfiprintf_r+0x130>
 80040e6:	9105      	str	r1, [sp, #20]
 80040e8:	e7c4      	b.n	8004074 <_svfiprintf_r+0x130>
 80040ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ee:	4604      	mov	r4, r0
 80040f0:	2301      	movs	r3, #1
 80040f2:	e7f0      	b.n	80040d6 <_svfiprintf_r+0x192>
 80040f4:	ab03      	add	r3, sp, #12
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	462a      	mov	r2, r5
 80040fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <_svfiprintf_r+0x1f0>)
 80040fc:	a904      	add	r1, sp, #16
 80040fe:	4638      	mov	r0, r7
 8004100:	f3af 8000 	nop.w
 8004104:	1c42      	adds	r2, r0, #1
 8004106:	4606      	mov	r6, r0
 8004108:	d1d6      	bne.n	80040b8 <_svfiprintf_r+0x174>
 800410a:	89ab      	ldrh	r3, [r5, #12]
 800410c:	065b      	lsls	r3, r3, #25
 800410e:	f53f af2d 	bmi.w	8003f6c <_svfiprintf_r+0x28>
 8004112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004114:	e72c      	b.n	8003f70 <_svfiprintf_r+0x2c>
 8004116:	ab03      	add	r3, sp, #12
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	462a      	mov	r2, r5
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <_svfiprintf_r+0x1f0>)
 800411e:	a904      	add	r1, sp, #16
 8004120:	4638      	mov	r0, r7
 8004122:	f000 f879 	bl	8004218 <_printf_i>
 8004126:	e7ed      	b.n	8004104 <_svfiprintf_r+0x1c0>
 8004128:	08005e94 	.word	0x08005e94
 800412c:	08005e9e 	.word	0x08005e9e
 8004130:	00000000 	.word	0x00000000
 8004134:	08003e8d 	.word	0x08003e8d
 8004138:	08005e9a 	.word	0x08005e9a

0800413c <_printf_common>:
 800413c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004140:	4616      	mov	r6, r2
 8004142:	4698      	mov	r8, r3
 8004144:	688a      	ldr	r2, [r1, #8]
 8004146:	690b      	ldr	r3, [r1, #16]
 8004148:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800414c:	4293      	cmp	r3, r2
 800414e:	bfb8      	it	lt
 8004150:	4613      	movlt	r3, r2
 8004152:	6033      	str	r3, [r6, #0]
 8004154:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004158:	4607      	mov	r7, r0
 800415a:	460c      	mov	r4, r1
 800415c:	b10a      	cbz	r2, 8004162 <_printf_common+0x26>
 800415e:	3301      	adds	r3, #1
 8004160:	6033      	str	r3, [r6, #0]
 8004162:	6823      	ldr	r3, [r4, #0]
 8004164:	0699      	lsls	r1, r3, #26
 8004166:	bf42      	ittt	mi
 8004168:	6833      	ldrmi	r3, [r6, #0]
 800416a:	3302      	addmi	r3, #2
 800416c:	6033      	strmi	r3, [r6, #0]
 800416e:	6825      	ldr	r5, [r4, #0]
 8004170:	f015 0506 	ands.w	r5, r5, #6
 8004174:	d106      	bne.n	8004184 <_printf_common+0x48>
 8004176:	f104 0a19 	add.w	sl, r4, #25
 800417a:	68e3      	ldr	r3, [r4, #12]
 800417c:	6832      	ldr	r2, [r6, #0]
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	42ab      	cmp	r3, r5
 8004182:	dc26      	bgt.n	80041d2 <_printf_common+0x96>
 8004184:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	3b00      	subs	r3, #0
 800418c:	bf18      	it	ne
 800418e:	2301      	movne	r3, #1
 8004190:	0692      	lsls	r2, r2, #26
 8004192:	d42b      	bmi.n	80041ec <_printf_common+0xb0>
 8004194:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004198:	4641      	mov	r1, r8
 800419a:	4638      	mov	r0, r7
 800419c:	47c8      	blx	r9
 800419e:	3001      	adds	r0, #1
 80041a0:	d01e      	beq.n	80041e0 <_printf_common+0xa4>
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	6922      	ldr	r2, [r4, #16]
 80041a6:	f003 0306 	and.w	r3, r3, #6
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	bf02      	ittt	eq
 80041ae:	68e5      	ldreq	r5, [r4, #12]
 80041b0:	6833      	ldreq	r3, [r6, #0]
 80041b2:	1aed      	subeq	r5, r5, r3
 80041b4:	68a3      	ldr	r3, [r4, #8]
 80041b6:	bf0c      	ite	eq
 80041b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041bc:	2500      	movne	r5, #0
 80041be:	4293      	cmp	r3, r2
 80041c0:	bfc4      	itt	gt
 80041c2:	1a9b      	subgt	r3, r3, r2
 80041c4:	18ed      	addgt	r5, r5, r3
 80041c6:	2600      	movs	r6, #0
 80041c8:	341a      	adds	r4, #26
 80041ca:	42b5      	cmp	r5, r6
 80041cc:	d11a      	bne.n	8004204 <_printf_common+0xc8>
 80041ce:	2000      	movs	r0, #0
 80041d0:	e008      	b.n	80041e4 <_printf_common+0xa8>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4652      	mov	r2, sl
 80041d6:	4641      	mov	r1, r8
 80041d8:	4638      	mov	r0, r7
 80041da:	47c8      	blx	r9
 80041dc:	3001      	adds	r0, #1
 80041de:	d103      	bne.n	80041e8 <_printf_common+0xac>
 80041e0:	f04f 30ff 	mov.w	r0, #4294967295
 80041e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e8:	3501      	adds	r5, #1
 80041ea:	e7c6      	b.n	800417a <_printf_common+0x3e>
 80041ec:	18e1      	adds	r1, r4, r3
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	2030      	movs	r0, #48	@ 0x30
 80041f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041f6:	4422      	add	r2, r4
 80041f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004200:	3302      	adds	r3, #2
 8004202:	e7c7      	b.n	8004194 <_printf_common+0x58>
 8004204:	2301      	movs	r3, #1
 8004206:	4622      	mov	r2, r4
 8004208:	4641      	mov	r1, r8
 800420a:	4638      	mov	r0, r7
 800420c:	47c8      	blx	r9
 800420e:	3001      	adds	r0, #1
 8004210:	d0e6      	beq.n	80041e0 <_printf_common+0xa4>
 8004212:	3601      	adds	r6, #1
 8004214:	e7d9      	b.n	80041ca <_printf_common+0x8e>
	...

08004218 <_printf_i>:
 8004218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	7e0f      	ldrb	r7, [r1, #24]
 800421e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004220:	2f78      	cmp	r7, #120	@ 0x78
 8004222:	4691      	mov	r9, r2
 8004224:	4680      	mov	r8, r0
 8004226:	460c      	mov	r4, r1
 8004228:	469a      	mov	sl, r3
 800422a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800422e:	d807      	bhi.n	8004240 <_printf_i+0x28>
 8004230:	2f62      	cmp	r7, #98	@ 0x62
 8004232:	d80a      	bhi.n	800424a <_printf_i+0x32>
 8004234:	2f00      	cmp	r7, #0
 8004236:	f000 80d2 	beq.w	80043de <_printf_i+0x1c6>
 800423a:	2f58      	cmp	r7, #88	@ 0x58
 800423c:	f000 80b9 	beq.w	80043b2 <_printf_i+0x19a>
 8004240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004244:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004248:	e03a      	b.n	80042c0 <_printf_i+0xa8>
 800424a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800424e:	2b15      	cmp	r3, #21
 8004250:	d8f6      	bhi.n	8004240 <_printf_i+0x28>
 8004252:	a101      	add	r1, pc, #4	@ (adr r1, 8004258 <_printf_i+0x40>)
 8004254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004258:	080042b1 	.word	0x080042b1
 800425c:	080042c5 	.word	0x080042c5
 8004260:	08004241 	.word	0x08004241
 8004264:	08004241 	.word	0x08004241
 8004268:	08004241 	.word	0x08004241
 800426c:	08004241 	.word	0x08004241
 8004270:	080042c5 	.word	0x080042c5
 8004274:	08004241 	.word	0x08004241
 8004278:	08004241 	.word	0x08004241
 800427c:	08004241 	.word	0x08004241
 8004280:	08004241 	.word	0x08004241
 8004284:	080043c5 	.word	0x080043c5
 8004288:	080042ef 	.word	0x080042ef
 800428c:	0800437f 	.word	0x0800437f
 8004290:	08004241 	.word	0x08004241
 8004294:	08004241 	.word	0x08004241
 8004298:	080043e7 	.word	0x080043e7
 800429c:	08004241 	.word	0x08004241
 80042a0:	080042ef 	.word	0x080042ef
 80042a4:	08004241 	.word	0x08004241
 80042a8:	08004241 	.word	0x08004241
 80042ac:	08004387 	.word	0x08004387
 80042b0:	6833      	ldr	r3, [r6, #0]
 80042b2:	1d1a      	adds	r2, r3, #4
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6032      	str	r2, [r6, #0]
 80042b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042c0:	2301      	movs	r3, #1
 80042c2:	e09d      	b.n	8004400 <_printf_i+0x1e8>
 80042c4:	6833      	ldr	r3, [r6, #0]
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	1d19      	adds	r1, r3, #4
 80042ca:	6031      	str	r1, [r6, #0]
 80042cc:	0606      	lsls	r6, r0, #24
 80042ce:	d501      	bpl.n	80042d4 <_printf_i+0xbc>
 80042d0:	681d      	ldr	r5, [r3, #0]
 80042d2:	e003      	b.n	80042dc <_printf_i+0xc4>
 80042d4:	0645      	lsls	r5, r0, #25
 80042d6:	d5fb      	bpl.n	80042d0 <_printf_i+0xb8>
 80042d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042dc:	2d00      	cmp	r5, #0
 80042de:	da03      	bge.n	80042e8 <_printf_i+0xd0>
 80042e0:	232d      	movs	r3, #45	@ 0x2d
 80042e2:	426d      	negs	r5, r5
 80042e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042e8:	4859      	ldr	r0, [pc, #356]	@ (8004450 <_printf_i+0x238>)
 80042ea:	230a      	movs	r3, #10
 80042ec:	e011      	b.n	8004312 <_printf_i+0xfa>
 80042ee:	6821      	ldr	r1, [r4, #0]
 80042f0:	6833      	ldr	r3, [r6, #0]
 80042f2:	0608      	lsls	r0, r1, #24
 80042f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042f8:	d402      	bmi.n	8004300 <_printf_i+0xe8>
 80042fa:	0649      	lsls	r1, r1, #25
 80042fc:	bf48      	it	mi
 80042fe:	b2ad      	uxthmi	r5, r5
 8004300:	2f6f      	cmp	r7, #111	@ 0x6f
 8004302:	4853      	ldr	r0, [pc, #332]	@ (8004450 <_printf_i+0x238>)
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	bf14      	ite	ne
 8004308:	230a      	movne	r3, #10
 800430a:	2308      	moveq	r3, #8
 800430c:	2100      	movs	r1, #0
 800430e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004312:	6866      	ldr	r6, [r4, #4]
 8004314:	60a6      	str	r6, [r4, #8]
 8004316:	2e00      	cmp	r6, #0
 8004318:	bfa2      	ittt	ge
 800431a:	6821      	ldrge	r1, [r4, #0]
 800431c:	f021 0104 	bicge.w	r1, r1, #4
 8004320:	6021      	strge	r1, [r4, #0]
 8004322:	b90d      	cbnz	r5, 8004328 <_printf_i+0x110>
 8004324:	2e00      	cmp	r6, #0
 8004326:	d04b      	beq.n	80043c0 <_printf_i+0x1a8>
 8004328:	4616      	mov	r6, r2
 800432a:	fbb5 f1f3 	udiv	r1, r5, r3
 800432e:	fb03 5711 	mls	r7, r3, r1, r5
 8004332:	5dc7      	ldrb	r7, [r0, r7]
 8004334:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004338:	462f      	mov	r7, r5
 800433a:	42bb      	cmp	r3, r7
 800433c:	460d      	mov	r5, r1
 800433e:	d9f4      	bls.n	800432a <_printf_i+0x112>
 8004340:	2b08      	cmp	r3, #8
 8004342:	d10b      	bne.n	800435c <_printf_i+0x144>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07df      	lsls	r7, r3, #31
 8004348:	d508      	bpl.n	800435c <_printf_i+0x144>
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	6861      	ldr	r1, [r4, #4]
 800434e:	4299      	cmp	r1, r3
 8004350:	bfde      	ittt	le
 8004352:	2330      	movle	r3, #48	@ 0x30
 8004354:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004358:	f106 36ff 	addle.w	r6, r6, #4294967295
 800435c:	1b92      	subs	r2, r2, r6
 800435e:	6122      	str	r2, [r4, #16]
 8004360:	f8cd a000 	str.w	sl, [sp]
 8004364:	464b      	mov	r3, r9
 8004366:	aa03      	add	r2, sp, #12
 8004368:	4621      	mov	r1, r4
 800436a:	4640      	mov	r0, r8
 800436c:	f7ff fee6 	bl	800413c <_printf_common>
 8004370:	3001      	adds	r0, #1
 8004372:	d14a      	bne.n	800440a <_printf_i+0x1f2>
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	b004      	add	sp, #16
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	4833      	ldr	r0, [pc, #204]	@ (8004454 <_printf_i+0x23c>)
 8004388:	2778      	movs	r7, #120	@ 0x78
 800438a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	6831      	ldr	r1, [r6, #0]
 8004392:	061f      	lsls	r7, r3, #24
 8004394:	f851 5b04 	ldr.w	r5, [r1], #4
 8004398:	d402      	bmi.n	80043a0 <_printf_i+0x188>
 800439a:	065f      	lsls	r7, r3, #25
 800439c:	bf48      	it	mi
 800439e:	b2ad      	uxthmi	r5, r5
 80043a0:	6031      	str	r1, [r6, #0]
 80043a2:	07d9      	lsls	r1, r3, #31
 80043a4:	bf44      	itt	mi
 80043a6:	f043 0320 	orrmi.w	r3, r3, #32
 80043aa:	6023      	strmi	r3, [r4, #0]
 80043ac:	b11d      	cbz	r5, 80043b6 <_printf_i+0x19e>
 80043ae:	2310      	movs	r3, #16
 80043b0:	e7ac      	b.n	800430c <_printf_i+0xf4>
 80043b2:	4827      	ldr	r0, [pc, #156]	@ (8004450 <_printf_i+0x238>)
 80043b4:	e7e9      	b.n	800438a <_printf_i+0x172>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f023 0320 	bic.w	r3, r3, #32
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	e7f6      	b.n	80043ae <_printf_i+0x196>
 80043c0:	4616      	mov	r6, r2
 80043c2:	e7bd      	b.n	8004340 <_printf_i+0x128>
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	6825      	ldr	r5, [r4, #0]
 80043c8:	6961      	ldr	r1, [r4, #20]
 80043ca:	1d18      	adds	r0, r3, #4
 80043cc:	6030      	str	r0, [r6, #0]
 80043ce:	062e      	lsls	r6, r5, #24
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	d501      	bpl.n	80043d8 <_printf_i+0x1c0>
 80043d4:	6019      	str	r1, [r3, #0]
 80043d6:	e002      	b.n	80043de <_printf_i+0x1c6>
 80043d8:	0668      	lsls	r0, r5, #25
 80043da:	d5fb      	bpl.n	80043d4 <_printf_i+0x1bc>
 80043dc:	8019      	strh	r1, [r3, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	4616      	mov	r6, r2
 80043e4:	e7bc      	b.n	8004360 <_printf_i+0x148>
 80043e6:	6833      	ldr	r3, [r6, #0]
 80043e8:	1d1a      	adds	r2, r3, #4
 80043ea:	6032      	str	r2, [r6, #0]
 80043ec:	681e      	ldr	r6, [r3, #0]
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	2100      	movs	r1, #0
 80043f2:	4630      	mov	r0, r6
 80043f4:	f7fb feec 	bl	80001d0 <memchr>
 80043f8:	b108      	cbz	r0, 80043fe <_printf_i+0x1e6>
 80043fa:	1b80      	subs	r0, r0, r6
 80043fc:	6060      	str	r0, [r4, #4]
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	2300      	movs	r3, #0
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004408:	e7aa      	b.n	8004360 <_printf_i+0x148>
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	4632      	mov	r2, r6
 800440e:	4649      	mov	r1, r9
 8004410:	4640      	mov	r0, r8
 8004412:	47d0      	blx	sl
 8004414:	3001      	adds	r0, #1
 8004416:	d0ad      	beq.n	8004374 <_printf_i+0x15c>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	079b      	lsls	r3, r3, #30
 800441c:	d413      	bmi.n	8004446 <_printf_i+0x22e>
 800441e:	68e0      	ldr	r0, [r4, #12]
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	4298      	cmp	r0, r3
 8004424:	bfb8      	it	lt
 8004426:	4618      	movlt	r0, r3
 8004428:	e7a6      	b.n	8004378 <_printf_i+0x160>
 800442a:	2301      	movs	r3, #1
 800442c:	4632      	mov	r2, r6
 800442e:	4649      	mov	r1, r9
 8004430:	4640      	mov	r0, r8
 8004432:	47d0      	blx	sl
 8004434:	3001      	adds	r0, #1
 8004436:	d09d      	beq.n	8004374 <_printf_i+0x15c>
 8004438:	3501      	adds	r5, #1
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	9903      	ldr	r1, [sp, #12]
 800443e:	1a5b      	subs	r3, r3, r1
 8004440:	42ab      	cmp	r3, r5
 8004442:	dcf2      	bgt.n	800442a <_printf_i+0x212>
 8004444:	e7eb      	b.n	800441e <_printf_i+0x206>
 8004446:	2500      	movs	r5, #0
 8004448:	f104 0619 	add.w	r6, r4, #25
 800444c:	e7f5      	b.n	800443a <_printf_i+0x222>
 800444e:	bf00      	nop
 8004450:	08005ea5 	.word	0x08005ea5
 8004454:	08005eb6 	.word	0x08005eb6

08004458 <memmove>:
 8004458:	4288      	cmp	r0, r1
 800445a:	b510      	push	{r4, lr}
 800445c:	eb01 0402 	add.w	r4, r1, r2
 8004460:	d902      	bls.n	8004468 <memmove+0x10>
 8004462:	4284      	cmp	r4, r0
 8004464:	4623      	mov	r3, r4
 8004466:	d807      	bhi.n	8004478 <memmove+0x20>
 8004468:	1e43      	subs	r3, r0, #1
 800446a:	42a1      	cmp	r1, r4
 800446c:	d008      	beq.n	8004480 <memmove+0x28>
 800446e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004476:	e7f8      	b.n	800446a <memmove+0x12>
 8004478:	4402      	add	r2, r0
 800447a:	4601      	mov	r1, r0
 800447c:	428a      	cmp	r2, r1
 800447e:	d100      	bne.n	8004482 <memmove+0x2a>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800448a:	e7f7      	b.n	800447c <memmove+0x24>

0800448c <_sbrk_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	@ (80044a8 <_sbrk_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd f89a 	bl	80015d0 <_sbrk>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_sbrk_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_sbrk_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	200006c4 	.word	0x200006c4

080044ac <_realloc_r>:
 80044ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b0:	4680      	mov	r8, r0
 80044b2:	4615      	mov	r5, r2
 80044b4:	460c      	mov	r4, r1
 80044b6:	b921      	cbnz	r1, 80044c2 <_realloc_r+0x16>
 80044b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044bc:	4611      	mov	r1, r2
 80044be:	f7ff bc59 	b.w	8003d74 <_malloc_r>
 80044c2:	b92a      	cbnz	r2, 80044d0 <_realloc_r+0x24>
 80044c4:	f7ff fbea 	bl	8003c9c <_free_r>
 80044c8:	2400      	movs	r4, #0
 80044ca:	4620      	mov	r0, r4
 80044cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044d0:	f000 f81a 	bl	8004508 <_malloc_usable_size_r>
 80044d4:	4285      	cmp	r5, r0
 80044d6:	4606      	mov	r6, r0
 80044d8:	d802      	bhi.n	80044e0 <_realloc_r+0x34>
 80044da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044de:	d8f4      	bhi.n	80044ca <_realloc_r+0x1e>
 80044e0:	4629      	mov	r1, r5
 80044e2:	4640      	mov	r0, r8
 80044e4:	f7ff fc46 	bl	8003d74 <_malloc_r>
 80044e8:	4607      	mov	r7, r0
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0ec      	beq.n	80044c8 <_realloc_r+0x1c>
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	462a      	mov	r2, r5
 80044f2:	4621      	mov	r1, r4
 80044f4:	bf28      	it	cs
 80044f6:	4632      	movcs	r2, r6
 80044f8:	f7ff fbc2 	bl	8003c80 <memcpy>
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f7ff fbcc 	bl	8003c9c <_free_r>
 8004504:	463c      	mov	r4, r7
 8004506:	e7e0      	b.n	80044ca <_realloc_r+0x1e>

08004508 <_malloc_usable_size_r>:
 8004508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800450c:	1f18      	subs	r0, r3, #4
 800450e:	2b00      	cmp	r3, #0
 8004510:	bfbc      	itt	lt
 8004512:	580b      	ldrlt	r3, [r1, r0]
 8004514:	18c0      	addlt	r0, r0, r3
 8004516:	4770      	bx	lr

08004518 <_init>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr

08004524 <_fini>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	bf00      	nop
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr
